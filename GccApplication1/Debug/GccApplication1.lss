
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  0000220c  000022a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000220c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  0080022c  0080022c  000022cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069a7  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a66  00000000  00000000  000091c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000348b  00000000  00000000  0000ac2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e74  00000000  00000000  0000e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000206a  00000000  00000000  0000ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ed7  00000000  00000000  00010f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00016e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c1       	rjmp	.+930    	; 0x3a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c1       	rjmp	.+926    	; 0x3a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c1       	rjmp	.+922    	; 0x3a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c1       	rjmp	.+918    	; 0x3a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c1       	rjmp	.+914    	; 0x3a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c1       	rjmp	.+910    	; 0x3a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c1       	rjmp	.+906    	; 0x3a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c1       	rjmp	.+902    	; 0x3a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c1       	rjmp	.+898    	; 0x3a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c1       	rjmp	.+894    	; 0x3a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c1       	rjmp	.+890    	; 0x3a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	49 c4       	rjmp	.+2194   	; 0x8c4 <__vector_12>
      32:	00 00       	nop
      34:	b9 c1       	rjmp	.+882    	; 0x3a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c1       	rjmp	.+878    	; 0x3a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c1       	rjmp	.+874    	; 0x3a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c1       	rjmp	.+870    	; 0x3a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	b1 c1       	rjmp	.+866    	; 0x3a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c1       	rjmp	.+862    	; 0x3a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c1       	rjmp	.+858    	; 0x3a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c1       	rjmp	.+854    	; 0x3a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c1       	rjmp	.+850    	; 0x3a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c1       	rjmp	.+846    	; 0x3a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c1       	rjmp	.+842    	; 0x3a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c1       	rjmp	.+838    	; 0x3a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	a1 c1       	rjmp	.+834    	; 0x3a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	9f c1       	rjmp	.+830    	; 0x3a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9d c1       	rjmp	.+826    	; 0x3a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c1       	rjmp	.+822    	; 0x3a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c1       	rjmp	.+818    	; 0x3a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c1       	rjmp	.+814    	; 0x3a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c1       	rjmp	.+810    	; 0x3a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c1       	rjmp	.+806    	; 0x3a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	91 c1       	rjmp	.+802    	; 0x3a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c1       	rjmp	.+798    	; 0x3a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c1       	rjmp	.+794    	; 0x3a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c1       	rjmp	.+790    	; 0x3a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	89 c1       	rjmp	.+786    	; 0x3a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	87 c1       	rjmp	.+782    	; 0x3a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c1       	rjmp	.+778    	; 0x3a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	83 c1       	rjmp	.+774    	; 0x3a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	81 c1       	rjmp	.+770    	; 0x3a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7f c1       	rjmp	.+766    	; 0x3a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7d c1       	rjmp	.+762    	; 0x3a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7b c1       	rjmp	.+758    	; 0x3a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	79 c1       	rjmp	.+754    	; 0x3a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	77 c1       	rjmp	.+750    	; 0x3a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	75 c1       	rjmp	.+746    	; 0x3a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	73 c1       	rjmp	.+742    	; 0x3a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	71 c1       	rjmp	.+738    	; 0x3a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6f c1       	rjmp	.+734    	; 0x3a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6d c1       	rjmp	.+730    	; 0x3a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6b c1       	rjmp	.+726    	; 0x3a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	69 c1       	rjmp	.+722    	; 0x3a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	67 c1       	rjmp	.+718    	; 0x3a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	65 c1       	rjmp	.+714    	; 0x3a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	63 c1       	rjmp	.+710    	; 0x3a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	44 01       	movw	r8, r8
      e6:	44 01       	movw	r8, r8
      e8:	44 01       	movw	r8, r8
      ea:	73 01       	movw	r14, r6
      ec:	7b 01       	movw	r14, r22
      ee:	8a 01       	movw	r16, r20
      f0:	44 01       	movw	r8, r8
      f2:	44 01       	movw	r8, r8
      f4:	73 01       	movw	r14, r6
      f6:	7b 01       	movw	r14, r22

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	04 e4       	ldi	r16, 0x44	; 68
      fa:	12 e0       	ldi	r17, 0x02	; 2
      fc:	0f 2e       	mov	r0, r31
      fe:	fc e6       	ldi	r31, 0x6C	; 108
     100:	ef 2e       	mov	r14, r31
     102:	f2 e0       	ldi	r31, 0x02	; 2
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	15 96       	adiw	r26, 0x05	; 5
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	16 97       	sbiw	r26, 0x06	; 6
     120:	c6 81       	ldd	r28, Z+6	; 0x06
     122:	d7 81       	ldd	r29, Z+7	; 0x07
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	35 d2       	rcall	.+1130   	; 0x594 <uxListRemove>
     12a:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <uxCurrentNumberOfTasks>
     134:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8f 89       	ldd	r24, Y+23	; 0x17
     144:	98 8d       	ldd	r25, Y+24	; 0x18
     146:	b5 d1       	rcall	.+874    	; 0x4b2 <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	b3 d1       	rcall	.+870    	; 0x4b2 <vPortFree>
     14c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	f0 d2       	rcall	.+1504   	; 0x73e <vPortYield>
     15e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <prvTimerTask+0x6>
     16a:	00 d0       	rcall	.+0      	; 0x16c <prvTimerTask+0x8>
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	4c 01       	movw	r8, r24
     176:	44 24       	eor	r4, r4
     178:	43 94       	inc	r4
     17a:	e1 2c       	mov	r14, r1
     17c:	f1 2c       	mov	r15, r1
     17e:	51 2c       	mov	r5, r1
     180:	c8 2e       	mov	r12, r24
     182:	d9 2c       	mov	r13, r9
     184:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <pxCurrentTimerList>
     188:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <pxCurrentTimerList+0x1>
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	09 f4       	brne	.+2      	; 0x194 <prvTimerTask+0x30>
     192:	d7 c0       	rjmp	.+430    	; 0x342 <prvTimerTask+0x1de>
     194:	05 80       	ldd	r0, Z+5	; 0x05
     196:	f6 81       	ldd	r31, Z+6	; 0x06
     198:	e0 2d       	mov	r30, r0
     19a:	a0 80       	ld	r10, Z
     19c:	b1 80       	ldd	r11, Z+1	; 0x01
     19e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <vTaskSuspendAll>
     1a2:	c4 01       	movw	r24, r8
     1a4:	0e 94 82 0c 	call	0x1904	; 0x1904 <prvSampleTimeNow>
     1a8:	8c 01       	movw	r16, r24
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	81 11       	cpse	r24, r1
     1ae:	48 c0       	rjmp	.+144    	; 0x240 <prvTimerTask+0xdc>
     1b0:	0a 15       	cp	r16, r10
     1b2:	1b 05       	cpc	r17, r11
     1b4:	b0 f1       	brcs	.+108    	; 0x222 <prvTimerTask+0xbe>
     1b6:	0e 94 9e 09 	call	0x133c	; 0x133c <xTaskResumeAll>
     1ba:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <pxCurrentTimerList>
     1be:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <pxCurrentTimerList+0x1>
     1c2:	05 80       	ldd	r0, Z+5	; 0x05
     1c4:	f6 81       	ldd	r31, Z+6	; 0x06
     1c6:	e0 2d       	mov	r30, r0
     1c8:	66 80       	ldd	r6, Z+6	; 0x06
     1ca:	77 80       	ldd	r7, Z+7	; 0x07
     1cc:	c3 01       	movw	r24, r6
     1ce:	02 96       	adiw	r24, 0x02	; 2
     1d0:	e1 d1       	rcall	.+962    	; 0x594 <uxListRemove>
     1d2:	d3 01       	movw	r26, r6
     1d4:	53 96       	adiw	r26, 0x13	; 19
     1d6:	8c 91       	ld	r24, X
     1d8:	53 97       	sbiw	r26, 0x13	; 19
     1da:	82 ff       	sbrs	r24, 2
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <prvTimerTask+0xa8>
     1de:	1c 96       	adiw	r26, 0x0c	; 12
     1e0:	6d 91       	ld	r22, X+
     1e2:	7c 91       	ld	r23, X
     1e4:	1d 97       	sbiw	r26, 0x0d	; 13
     1e6:	6a 0d       	add	r22, r10
     1e8:	7b 1d       	adc	r23, r11
     1ea:	95 01       	movw	r18, r10
     1ec:	a8 01       	movw	r20, r16
     1ee:	c3 01       	movw	r24, r6
     1f0:	0e 94 c7 0b 	call	0x178e	; 0x178e <prvInsertTimerInActiveList>
     1f4:	88 23       	and	r24, r24
     1f6:	69 f0       	breq	.+26     	; 0x212 <prvTimerTask+0xae>
     1f8:	0e 2d       	mov	r16, r14
     1fa:	1f 2d       	mov	r17, r15
     1fc:	2e 2d       	mov	r18, r14
     1fe:	3f 2d       	mov	r19, r15
     200:	a5 01       	movw	r20, r10
     202:	65 2d       	mov	r22, r5
     204:	c3 01       	movw	r24, r6
     206:	0e 94 3e 0c 	call	0x187c	; 0x187c <xTimerGenericCommand>
     20a:	03 c0       	rjmp	.+6      	; 0x212 <prvTimerTask+0xae>
     20c:	8e 7f       	andi	r24, 0xFE	; 254
     20e:	f3 01       	movw	r30, r6
     210:	83 8b       	std	Z+19, r24	; 0x13
     212:	d3 01       	movw	r26, r6
     214:	50 96       	adiw	r26, 0x10	; 16
     216:	ed 91       	ld	r30, X+
     218:	fc 91       	ld	r31, X
     21a:	51 97       	sbiw	r26, 0x11	; 17
     21c:	c3 01       	movw	r24, r6
     21e:	19 95       	eicall
     220:	84 c0       	rjmp	.+264    	; 0x32a <prvTimerTask+0x1c6>
     222:	45 2d       	mov	r20, r5
     224:	b5 01       	movw	r22, r10
     226:	60 1b       	sub	r22, r16
     228:	71 0b       	sbc	r23, r17
     22a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <xTimerQueue>
     22e:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <xTimerQueue+0x1>
     232:	f1 d5       	rcall	.+3042   	; 0xe16 <vQueueWaitForMessageRestricted>
     234:	0e 94 9e 09 	call	0x133c	; 0x133c <xTaskResumeAll>
     238:	81 11       	cpse	r24, r1
     23a:	77 c0       	rjmp	.+238    	; 0x32a <prvTimerTask+0x1c6>
     23c:	80 d2       	rcall	.+1280   	; 0x73e <vPortYield>
     23e:	75 c0       	rjmp	.+234    	; 0x32a <prvTimerTask+0x1c6>
     240:	0e 94 9e 09 	call	0x133c	; 0x133c <xTaskResumeAll>
     244:	72 c0       	rjmp	.+228    	; 0x32a <prvTimerTask+0x1c6>
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	88 23       	and	r24, r24
     24a:	0c f4       	brge	.+2      	; 0x24e <prvTimerTask+0xea>
     24c:	6e c0       	rjmp	.+220    	; 0x32a <prvTimerTask+0x1c6>
     24e:	ac 80       	ldd	r10, Y+4	; 0x04
     250:	bd 80       	ldd	r11, Y+5	; 0x05
     252:	f5 01       	movw	r30, r10
     254:	82 85       	ldd	r24, Z+10	; 0x0a
     256:	93 85       	ldd	r25, Z+11	; 0x0b
     258:	89 2b       	or	r24, r25
     25a:	19 f0       	breq	.+6      	; 0x262 <prvTimerTask+0xfe>
     25c:	c5 01       	movw	r24, r10
     25e:	02 96       	adiw	r24, 0x02	; 2
     260:	99 d1       	rcall	.+818    	; 0x594 <uxListRemove>
     262:	ce 01       	movw	r24, r28
     264:	06 96       	adiw	r24, 0x06	; 6
     266:	0e 94 82 0c 	call	0x1904	; 0x1904 <prvSampleTimeNow>
     26a:	ac 01       	movw	r20, r24
     26c:	e9 81       	ldd	r30, Y+1	; 0x01
     26e:	0e 2e       	mov	r0, r30
     270:	00 0c       	add	r0, r0
     272:	ff 0b       	sbc	r31, r31
     274:	ea 30       	cpi	r30, 0x0A	; 10
     276:	f1 05       	cpc	r31, r1
     278:	08 f0       	brcs	.+2      	; 0x27c <prvTimerTask+0x118>
     27a:	57 c0       	rjmp	.+174    	; 0x32a <prvTimerTask+0x1c6>
     27c:	88 27       	eor	r24, r24
     27e:	ee 58       	subi	r30, 0x8E	; 142
     280:	ff 4f       	sbci	r31, 0xFF	; 255
     282:	8f 4f       	sbci	r24, 0xFF	; 255
     284:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__tablejump2__>
     288:	d5 01       	movw	r26, r10
     28a:	53 96       	adiw	r26, 0x13	; 19
     28c:	8c 91       	ld	r24, X
     28e:	53 97       	sbiw	r26, 0x13	; 19
     290:	81 60       	ori	r24, 0x01	; 1
     292:	53 96       	adiw	r26, 0x13	; 19
     294:	8c 93       	st	X, r24
     296:	53 97       	sbiw	r26, 0x13	; 19
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	3b 81       	ldd	r19, Y+3	; 0x03
     29c:	1c 96       	adiw	r26, 0x0c	; 12
     29e:	6d 91       	ld	r22, X+
     2a0:	7c 91       	ld	r23, X
     2a2:	1d 97       	sbiw	r26, 0x0d	; 13
     2a4:	62 0f       	add	r22, r18
     2a6:	73 1f       	adc	r23, r19
     2a8:	c5 01       	movw	r24, r10
     2aa:	0e 94 c7 0b 	call	0x178e	; 0x178e <prvInsertTimerInActiveList>
     2ae:	88 23       	and	r24, r24
     2b0:	e1 f1       	breq	.+120    	; 0x32a <prvTimerTask+0x1c6>
     2b2:	d5 01       	movw	r26, r10
     2b4:	50 96       	adiw	r26, 0x10	; 16
     2b6:	ed 91       	ld	r30, X+
     2b8:	fc 91       	ld	r31, X
     2ba:	51 97       	sbiw	r26, 0x11	; 17
     2bc:	c5 01       	movw	r24, r10
     2be:	19 95       	eicall
     2c0:	f5 01       	movw	r30, r10
     2c2:	83 89       	ldd	r24, Z+19	; 0x13
     2c4:	82 ff       	sbrs	r24, 2
     2c6:	31 c0       	rjmp	.+98     	; 0x32a <prvTimerTask+0x1c6>
     2c8:	4a 81       	ldd	r20, Y+2	; 0x02
     2ca:	5b 81       	ldd	r21, Y+3	; 0x03
     2cc:	84 85       	ldd	r24, Z+12	; 0x0c
     2ce:	95 85       	ldd	r25, Z+13	; 0x0d
     2d0:	48 0f       	add	r20, r24
     2d2:	59 1f       	adc	r21, r25
     2d4:	0e 2d       	mov	r16, r14
     2d6:	1f 2d       	mov	r17, r15
     2d8:	2e 2d       	mov	r18, r14
     2da:	3f 2d       	mov	r19, r15
     2dc:	65 2d       	mov	r22, r5
     2de:	c5 01       	movw	r24, r10
     2e0:	0e 94 3e 0c 	call	0x187c	; 0x187c <xTimerGenericCommand>
     2e4:	22 c0       	rjmp	.+68     	; 0x32a <prvTimerTask+0x1c6>
     2e6:	d5 01       	movw	r26, r10
     2e8:	53 96       	adiw	r26, 0x13	; 19
     2ea:	8c 91       	ld	r24, X
     2ec:	53 97       	sbiw	r26, 0x13	; 19
     2ee:	8e 7f       	andi	r24, 0xFE	; 254
     2f0:	53 96       	adiw	r26, 0x13	; 19
     2f2:	8c 93       	st	X, r24
     2f4:	1a c0       	rjmp	.+52     	; 0x32a <prvTimerTask+0x1c6>
     2f6:	f5 01       	movw	r30, r10
     2f8:	83 89       	ldd	r24, Z+19	; 0x13
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	83 8b       	std	Z+19, r24	; 0x13
     2fe:	6a 81       	ldd	r22, Y+2	; 0x02
     300:	7b 81       	ldd	r23, Y+3	; 0x03
     302:	75 87       	std	Z+13, r23	; 0x0d
     304:	64 87       	std	Z+12, r22	; 0x0c
     306:	64 0f       	add	r22, r20
     308:	75 1f       	adc	r23, r21
     30a:	9a 01       	movw	r18, r20
     30c:	c5 01       	movw	r24, r10
     30e:	0e 94 c7 0b 	call	0x178e	; 0x178e <prvInsertTimerInActiveList>
     312:	0b c0       	rjmp	.+22     	; 0x32a <prvTimerTask+0x1c6>
     314:	d5 01       	movw	r26, r10
     316:	53 96       	adiw	r26, 0x13	; 19
     318:	8c 91       	ld	r24, X
     31a:	81 fd       	sbrc	r24, 1
     31c:	03 c0       	rjmp	.+6      	; 0x324 <prvTimerTask+0x1c0>
     31e:	c5 01       	movw	r24, r10
     320:	c8 d0       	rcall	.+400    	; 0x4b2 <vPortFree>
     322:	03 c0       	rjmp	.+6      	; 0x32a <prvTimerTask+0x1c6>
     324:	8e 7f       	andi	r24, 0xFE	; 254
     326:	f5 01       	movw	r30, r10
     328:	83 8b       	std	Z+19, r24	; 0x13
     32a:	4e 2d       	mov	r20, r14
     32c:	5f 2d       	mov	r21, r15
     32e:	6c 2d       	mov	r22, r12
     330:	7d 2d       	mov	r23, r13
     332:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <xTimerQueue>
     336:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <xTimerQueue+0x1>
     33a:	e4 d4       	rcall	.+2504   	; 0xd04 <xQueueReceive>
     33c:	81 11       	cpse	r24, r1
     33e:	83 cf       	rjmp	.-250    	; 0x246 <prvTimerTask+0xe2>
     340:	21 cf       	rjmp	.-446    	; 0x184 <prvTimerTask+0x20>
     342:	35 d7       	rcall	.+3690   	; 0x11ae <vTaskSuspendAll>
     344:	c4 01       	movw	r24, r8
     346:	0e 94 82 0c 	call	0x1904	; 0x1904 <prvSampleTimeNow>
     34a:	8c 01       	movw	r16, r24
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	81 11       	cpse	r24, r1
     350:	77 cf       	rjmp	.-274    	; 0x240 <prvTimerTask+0xdc>
     352:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <pxOverflowTimerList>
     356:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <pxOverflowTimerList+0x1>
     35a:	80 81       	ld	r24, Z
     35c:	44 2d       	mov	r20, r4
     35e:	81 11       	cpse	r24, r1
     360:	45 2d       	mov	r20, r5
     362:	ae 2c       	mov	r10, r14
     364:	bf 2c       	mov	r11, r15
     366:	5e cf       	rjmp	.-324    	; 0x224 <prvTimerTask+0xc0>

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d1 e2       	ldi	r29, 0x21	; 33
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	0c bf       	out	0x3c, r16	; 60

00000378 <__do_copy_data>:
     378:	12 e0       	ldi	r17, 0x02	; 2
     37a:	a0 e0       	ldi	r26, 0x00	; 0
     37c:	b2 e0       	ldi	r27, 0x02	; 2
     37e:	ec e0       	ldi	r30, 0x0C	; 12
     380:	f2 e2       	ldi	r31, 0x22	; 34
     382:	00 e0       	ldi	r16, 0x00	; 0
     384:	0b bf       	out	0x3b, r16	; 59
     386:	02 c0       	rjmp	.+4      	; 0x38c <__do_copy_data+0x14>
     388:	07 90       	elpm	r0, Z+
     38a:	0d 92       	st	X+, r0
     38c:	ac 32       	cpi	r26, 0x2C	; 44
     38e:	b1 07       	cpc	r27, r17
     390:	d9 f7       	brne	.-10     	; 0x388 <__do_copy_data+0x10>

00000392 <__do_clear_bss>:
     392:	22 e0       	ldi	r18, 0x02	; 2
     394:	ac e2       	ldi	r26, 0x2C	; 44
     396:	b2 e0       	ldi	r27, 0x02	; 2
     398:	01 c0       	rjmp	.+2      	; 0x39c <.do_clear_bss_start>

0000039a <.do_clear_bss_loop>:
     39a:	1d 92       	st	X+, r1

0000039c <.do_clear_bss_start>:
     39c:	aa 3b       	cpi	r26, 0xBA	; 186
     39e:	b2 07       	cpc	r27, r18
     3a0:	e1 f7       	brne	.-8      	; 0x39a <.do_clear_bss_loop>
     3a2:	51 d0       	rcall	.+162    	; 0x446 <main>
     3a4:	0c 94 04 11 	jmp	0x2208	; 0x2208 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	2b ce       	rjmp	.-938    	; 0x0 <__vectors>

000003aa <task1>:
/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 27 0a 	call	0x144e	; 0x144e <vTaskSetApplicationTaskTag>
	{
		//xSemaphoreTake(xTestSemaphore,portMAX_DELAY);
		vTaskDelay(10);
		//xSemaphoreGive(xTestSemaphore);

		PORTA ^= _BV(PA0);
     3b6:	c1 e0       	ldi	r28, 0x01	; 1
	#endif

	for(;;)
	{
		//xSemaphoreTake(xTestSemaphore,portMAX_DELAY);
		vTaskDelay(10);
     3b8:	8a e0       	ldi	r24, 0x0A	; 10
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 17 0a 	call	0x142e	; 0x142e <vTaskDelay>
		//xSemaphoreGive(xTestSemaphore);

		PORTA ^= _BV(PA0);
     3c0:	82 b1       	in	r24, 0x02	; 2
     3c2:	8c 27       	eor	r24, r28
     3c4:	82 b9       	out	0x02, r24	; 2
     3c6:	f8 cf       	rjmp	.-16     	; 0x3b8 <task1+0xe>

000003c8 <task2>:
/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 27 0a 	call	0x144e	; 0x144e <vTaskSetApplicationTaskTag>
	#endif

	for(;;)
	{
		vTaskDelay(50);
     3d4:	82 e3       	ldi	r24, 0x32	; 50
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 17 0a 	call	0x142e	; 0x142e <vTaskDelay>
		PORTA ^= _BV(PA7);
     3dc:	82 b1       	in	r24, 0x02	; 2
     3de:	80 58       	subi	r24, 0x80	; 128
     3e0:	82 b9       	out	0x02, r24	; 2
     3e2:	f8 cf       	rjmp	.-16     	; 0x3d4 <task2+0xc>

000003e4 <create_tasks_and_semaphores>:
SemaphoreHandle_t xTestSemaphore;


/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
	
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
     3ea:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <xTestSemaphore>
     3ee:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <xTestSemaphore+0x1>
     3f2:	89 2b       	or	r24, r25
     3f4:	71 f4       	brne	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	35 d4       	rcall	.+2154   	; 0xc64 <xQueueCreateMutex>
     3fa:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <xTestSemaphore+0x1>
     3fe:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	31 f0       	breq	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	97 d3       	rcall	.+1838   	; 0xb40 <xQueueGenericSend>
		}
	}

	xTaskCreate(
     412:	e1 2c       	mov	r14, r1
     414:	f1 2c       	mov	r15, r1
     416:	02 e0       	ldi	r16, 0x02	; 2
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 ec       	ldi	r20, 0xC0	; 192
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	66 e0       	ldi	r22, 0x06	; 6
     422:	72 e0       	ldi	r23, 0x02	; 2
     424:	85 ed       	ldi	r24, 0xD5	; 213
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	84 d5       	rcall	.+2824   	; 0xf32 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
     42a:	01 e0       	ldi	r16, 0x01	; 1
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 ec       	ldi	r20, 0xC0	; 192
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	6c e0       	ldi	r22, 0x0C	; 12
     436:	72 e0       	ldi	r23, 0x02	; 2
     438:	84 ee       	ldi	r24, 0xE4	; 228
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	7a d5       	rcall	.+2804   	; 0xf32 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	08 95       	ret

00000446 <main>:


/*-----------------------------------------------------------*/
int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
     446:	81 b1       	in	r24, 0x01	; 1
     448:	81 68       	ori	r24, 0x81	; 129
     44a:	81 b9       	out	0x01, r24	; 1
	trace_init();
     44c:	0b d0       	rcall	.+22     	; 0x464 <trace_init>

	create_tasks_and_semaphores();
     44e:	ca df       	rcall	.-108    	; 0x3e4 <create_tasks_and_semaphores>
	vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
     450:	7d d6       	rcall	.+3322   	; 0x114c <vTaskStartScheduler>
     452:	c2 e1       	ldi	r28, 0x12	; 18

	/* Replace with your application code */
	while (1)
	{
		printf("Hello world");
     454:	d2 e0       	ldi	r29, 0x02	; 2
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <printf>
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	f9 cf       	rjmp	.-14     	; 0x456 <main+0x10>

00000464 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     464:	e7 e0       	ldi	r30, 0x07	; 7
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	80 81       	ld	r24, Z
     46a:	8f 60       	ori	r24, 0x0F	; 15
     46c:	80 83       	st	Z, r24
     46e:	08 95       	ret

00000470 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     470:	e8 e0       	ldi	r30, 0x08	; 8
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	90 81       	ld	r25, Z
     476:	90 7f       	andi	r25, 0xF0	; 240
     478:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     47a:	90 81       	ld	r25, Z
     47c:	8f 70       	andi	r24, 0x0F	; 15
     47e:	98 2b       	or	r25, r24
     480:	90 83       	st	Z, r25
     482:	08 95       	ret

00000484 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     484:	e8 e0       	ldi	r30, 0x08	; 8
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	80 81       	ld	r24, Z
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	80 83       	st	Z, r24
     48e:	08 95       	ret

00000490 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     496:	8b d6       	rcall	.+3350   	; 0x11ae <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     498:	ce 01       	movw	r24, r28
     49a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     49e:	ec 01       	movw	r28, r24
     4a0:	4d d7       	rcall	.+3738   	; 0x133c <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     4a2:	20 97       	sbiw	r28, 0x00	; 0
     4a4:	11 f4       	brne	.+4      	; 0x4aa <pvPortMalloc+0x1a>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     4a6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     4aa:	ce 01       	movw	r24, r28
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
    if( pv )
     4b6:	00 97       	sbiw	r24, 0x00	; 0
     4b8:	31 f0       	breq	.+12     	; 0x4c6 <vPortFree+0x14>
     4ba:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     4bc:	78 d6       	rcall	.+3312   	; 0x11ae <vTaskSuspendAll>
        {
            free( pv );
     4be:	ce 01       	movw	r24, r28
     4c0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     4c4:	3b d7       	rcall	.+3702   	; 0x133c <xTaskResumeAll>
    }
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     4cc:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4ce:	03 96       	adiw	r24, 0x03	; 3
     4d0:	92 83       	std	Z+2, r25	; 0x02
     4d2:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	3f ef       	ldi	r19, 0xFF	; 255
     4d8:	34 83       	std	Z+4, r19	; 0x04
     4da:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4dc:	96 83       	std	Z+6, r25	; 0x06
     4de:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4e0:	90 87       	std	Z+8, r25	; 0x08
     4e2:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     4e4:	10 82       	st	Z, r1
     4e6:	08 95       	ret

000004e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     4e8:	fc 01       	movw	r30, r24
     4ea:	11 86       	std	Z+9, r1	; 0x09
     4ec:	10 86       	std	Z+8, r1	; 0x08
     4ee:	08 95       	ret

000004f0 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	9c 01       	movw	r18, r24
     4f6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     4f8:	dc 01       	movw	r26, r24
     4fa:	11 96       	adiw	r26, 0x01	; 1
     4fc:	cd 91       	ld	r28, X+
     4fe:	dc 91       	ld	r29, X
     500:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     502:	d3 83       	std	Z+3, r29	; 0x03
     504:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     506:	8c 81       	ldd	r24, Y+4	; 0x04
     508:	9d 81       	ldd	r25, Y+5	; 0x05
     50a:	95 83       	std	Z+5, r25	; 0x05
     50c:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	9d 81       	ldd	r25, Y+5	; 0x05
     512:	dc 01       	movw	r26, r24
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	7c 93       	st	X, r23
     518:	6e 93       	st	-X, r22
     51a:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     51c:	7d 83       	std	Y+5, r23	; 0x05
     51e:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     520:	31 87       	std	Z+9, r19	; 0x09
     522:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     524:	f9 01       	movw	r30, r18
     526:	80 81       	ld	r24, Z
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 83       	st	Z, r24
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     538:	48 81       	ld	r20, Y
     53a:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     53c:	4f 3f       	cpi	r20, 0xFF	; 255
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	52 07       	cpc	r21, r18
     542:	21 f4       	brne	.+8      	; 0x54c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     544:	fc 01       	movw	r30, r24
     546:	a7 81       	ldd	r26, Z+7	; 0x07
     548:	b0 85       	ldd	r27, Z+8	; 0x08
     54a:	0d c0       	rjmp	.+26     	; 0x566 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     54c:	dc 01       	movw	r26, r24
     54e:	13 96       	adiw	r26, 0x03	; 3
     550:	01 c0       	rjmp	.+2      	; 0x554 <vListInsert+0x22>
     552:	df 01       	movw	r26, r30
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	13 97       	sbiw	r26, 0x03	; 3
     55c:	20 81       	ld	r18, Z
     55e:	31 81       	ldd	r19, Z+1	; 0x01
     560:	42 17       	cp	r20, r18
     562:	53 07       	cpc	r21, r19
     564:	b0 f7       	brcc	.-20     	; 0x552 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     566:	12 96       	adiw	r26, 0x02	; 2
     568:	ed 91       	ld	r30, X+
     56a:	fc 91       	ld	r31, X
     56c:	13 97       	sbiw	r26, 0x03	; 3
     56e:	fb 83       	std	Y+3, r31	; 0x03
     570:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     572:	d5 83       	std	Z+5, r29	; 0x05
     574:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     576:	bd 83       	std	Y+5, r27	; 0x05
     578:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     57a:	13 96       	adiw	r26, 0x03	; 3
     57c:	dc 93       	st	X, r29
     57e:	ce 93       	st	-X, r28
     580:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     582:	99 87       	std	Y+9, r25	; 0x09
     584:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     586:	fc 01       	movw	r30, r24
     588:	20 81       	ld	r18, Z
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	20 83       	st	Z, r18
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     59a:	a0 85       	ldd	r26, Z+8	; 0x08
     59c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     59e:	c2 81       	ldd	r28, Z+2	; 0x02
     5a0:	d3 81       	ldd	r29, Z+3	; 0x03
     5a2:	84 81       	ldd	r24, Z+4	; 0x04
     5a4:	95 81       	ldd	r25, Z+5	; 0x05
     5a6:	9d 83       	std	Y+5, r25	; 0x05
     5a8:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5aa:	c4 81       	ldd	r28, Z+4	; 0x04
     5ac:	d5 81       	ldd	r29, Z+5	; 0x05
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	93 81       	ldd	r25, Z+3	; 0x03
     5b2:	9b 83       	std	Y+3, r25	; 0x03
     5b4:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5b6:	11 96       	adiw	r26, 0x01	; 1
     5b8:	8d 91       	ld	r24, X+
     5ba:	9c 91       	ld	r25, X
     5bc:	12 97       	sbiw	r26, 0x02	; 2
     5be:	e8 17       	cp	r30, r24
     5c0:	f9 07       	cpc	r31, r25
     5c2:	31 f4       	brne	.+12     	; 0x5d0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5c4:	84 81       	ldd	r24, Z+4	; 0x04
     5c6:	95 81       	ldd	r25, Z+5	; 0x05
     5c8:	12 96       	adiw	r26, 0x02	; 2
     5ca:	9c 93       	st	X, r25
     5cc:	8e 93       	st	-X, r24
     5ce:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5d0:	11 86       	std	Z+9, r1	; 0x09
     5d2:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5d4:	8c 91       	ld	r24, X
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5da:	8c 91       	ld	r24, X
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     5e2:	31 e1       	ldi	r19, 0x11	; 17
     5e4:	fc 01       	movw	r30, r24
     5e6:	30 83       	st	Z, r19
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	22 e2       	ldi	r18, 0x22	; 34
     5ec:	20 83       	st	Z, r18
     5ee:	31 97       	sbiw	r30, 0x01	; 1
     5f0:	a3 e3       	ldi	r26, 0x33	; 51
     5f2:	a0 83       	st	Z, r26
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	60 83       	st	Z, r22
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	70 83       	st	Z, r23
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	10 82       	st	Z, r1
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	10 82       	st	Z, r1
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	60 e8       	ldi	r22, 0x80	; 128
     608:	60 83       	st	Z, r22
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	10 82       	st	Z, r1
     60e:	31 97       	sbiw	r30, 0x01	; 1
     610:	10 82       	st	Z, r1
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	10 82       	st	Z, r1
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	60 83       	st	Z, r22
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	60 83       	st	Z, r22
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	64 e0       	ldi	r22, 0x04	; 4
     626:	60 83       	st	Z, r22
     628:	31 97       	sbiw	r30, 0x01	; 1
     62a:	65 e0       	ldi	r22, 0x05	; 5
     62c:	60 83       	st	Z, r22
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	66 e0       	ldi	r22, 0x06	; 6
     632:	60 83       	st	Z, r22
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	67 e0       	ldi	r22, 0x07	; 7
     638:	60 83       	st	Z, r22
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	68 e0       	ldi	r22, 0x08	; 8
     63e:	60 83       	st	Z, r22
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	69 e0       	ldi	r22, 0x09	; 9
     644:	60 83       	st	Z, r22
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	60 e1       	ldi	r22, 0x10	; 16
     64a:	60 83       	st	Z, r22
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	30 83       	st	Z, r19
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	32 e1       	ldi	r19, 0x12	; 18
     654:	30 83       	st	Z, r19
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	33 e1       	ldi	r19, 0x13	; 19
     65a:	30 83       	st	Z, r19
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	34 e1       	ldi	r19, 0x14	; 20
     660:	30 83       	st	Z, r19
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	35 e1       	ldi	r19, 0x15	; 21
     666:	30 83       	st	Z, r19
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	36 e1       	ldi	r19, 0x16	; 22
     66c:	30 83       	st	Z, r19
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	37 e1       	ldi	r19, 0x17	; 23
     672:	30 83       	st	Z, r19
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	38 e1       	ldi	r19, 0x18	; 24
     678:	30 83       	st	Z, r19
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	39 e1       	ldi	r19, 0x19	; 25
     67e:	30 83       	st	Z, r19
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	30 e2       	ldi	r19, 0x20	; 32
     684:	30 83       	st	Z, r19
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	31 e2       	ldi	r19, 0x21	; 33
     68a:	30 83       	st	Z, r19
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	20 83       	st	Z, r18
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	23 e2       	ldi	r18, 0x23	; 35
     694:	20 83       	st	Z, r18
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	40 83       	st	Z, r20
     69a:	31 97       	sbiw	r30, 0x01	; 1
     69c:	50 83       	st	Z, r21
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	26 e2       	ldi	r18, 0x26	; 38
     6a2:	20 83       	st	Z, r18
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	27 e2       	ldi	r18, 0x27	; 39
     6a8:	20 83       	st	Z, r18
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	28 e2       	ldi	r18, 0x28	; 40
     6ae:	20 83       	st	Z, r18
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	29 e2       	ldi	r18, 0x29	; 41
     6b4:	20 83       	st	Z, r18
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	20 e3       	ldi	r18, 0x30	; 48
     6ba:	20 83       	st	Z, r18
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	21 e3       	ldi	r18, 0x31	; 49
     6c0:	20 83       	st	Z, r18
     6c2:	89 97       	sbiw	r24, 0x29	; 41
     6c4:	08 95       	ret

000006c6 <xPortStartScheduler>:
     6c6:	a8 95       	wdr
     6c8:	90 ec       	ldi	r25, 0xC0	; 192
     6ca:	88 e1       	ldi	r24, 0x18	; 24
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	a8 95       	wdr
     6d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6dc:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <pxCurrentTCB>
     6e0:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     6e4:	cd 91       	ld	r28, X+
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	dd 91       	ld	r29, X+
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	ff 91       	pop	r31
     6ee:	ef 91       	pop	r30
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	bf 91       	pop	r27
     6f6:	af 91       	pop	r26
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	7f 91       	pop	r23
     6fe:	6f 91       	pop	r22
     700:	5f 91       	pop	r21
     702:	4f 91       	pop	r20
     704:	3f 91       	pop	r19
     706:	2f 91       	pop	r18
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	bf 90       	pop	r11
     716:	af 90       	pop	r10
     718:	9f 90       	pop	r9
     71a:	8f 90       	pop	r8
     71c:	7f 90       	pop	r7
     71e:	6f 90       	pop	r6
     720:	5f 90       	pop	r5
     722:	4f 90       	pop	r4
     724:	3f 90       	pop	r3
     726:	2f 90       	pop	r2
     728:	1f 90       	pop	r1
     72a:	0f 90       	pop	r0
     72c:	0c be       	out	0x3c, r0	; 60
     72e:	0f 90       	pop	r0
     730:	0b be       	out	0x3b, r0	; 59
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	08 95       	ret
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	08 95       	ret

0000073e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     73e:	0f 92       	push	r0
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	0f 92       	push	r0
     746:	0b b6       	in	r0, 0x3b	; 59
     748:	0f 92       	push	r0
     74a:	0c b6       	in	r0, 0x3c	; 60
     74c:	0f 92       	push	r0
     74e:	1f 92       	push	r1
     750:	11 24       	eor	r1, r1
     752:	2f 92       	push	r2
     754:	3f 92       	push	r3
     756:	4f 92       	push	r4
     758:	5f 92       	push	r5
     75a:	6f 92       	push	r6
     75c:	7f 92       	push	r7
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
     78e:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <pxCurrentTCB>
     792:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     796:	0d b6       	in	r0, 0x3d	; 61
     798:	0d 92       	st	X+, r0
     79a:	0e b6       	in	r0, 0x3e	; 62
     79c:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     79e:	66 d6       	rcall	.+3276   	; 0x146c <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     7a0:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <pxCurrentTCB>
     7a4:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     7a8:	cd 91       	ld	r28, X+
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	dd 91       	ld	r29, X+
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	bf 91       	pop	r27
     7ba:	af 91       	pop	r26
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	7f 91       	pop	r23
     7c2:	6f 91       	pop	r22
     7c4:	5f 91       	pop	r21
     7c6:	4f 91       	pop	r20
     7c8:	3f 91       	pop	r19
     7ca:	2f 91       	pop	r18
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	7f 90       	pop	r7
     7e2:	6f 90       	pop	r6
     7e4:	5f 90       	pop	r5
     7e6:	4f 90       	pop	r4
     7e8:	3f 90       	pop	r3
     7ea:	2f 90       	pop	r2
     7ec:	1f 90       	pop	r1
     7ee:	0f 90       	pop	r0
     7f0:	0c be       	out	0x3c, r0	; 60
     7f2:	0f 90       	pop	r0
     7f4:	0b be       	out	0x3b, r0	; 59
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7fc:	08 95       	ret

000007fe <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	0f 92       	push	r0
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	0c b6       	in	r0, 0x3c	; 60
     80c:	0f 92       	push	r0
     80e:	1f 92       	push	r1
     810:	11 24       	eor	r1, r1
     812:	2f 92       	push	r2
     814:	3f 92       	push	r3
     816:	4f 92       	push	r4
     818:	5f 92       	push	r5
     81a:	6f 92       	push	r6
     81c:	7f 92       	push	r7
     81e:	8f 92       	push	r8
     820:	9f 92       	push	r9
     822:	af 92       	push	r10
     824:	bf 92       	push	r11
     826:	cf 92       	push	r12
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	2f 93       	push	r18
     834:	3f 93       	push	r19
     836:	4f 93       	push	r20
     838:	5f 93       	push	r21
     83a:	6f 93       	push	r22
     83c:	7f 93       	push	r23
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	af 93       	push	r26
     844:	bf 93       	push	r27
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
     84e:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <pxCurrentTCB>
     852:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     856:	0d b6       	in	r0, 0x3d	; 61
     858:	0d 92       	st	X+, r0
     85a:	0e b6       	in	r0, 0x3e	; 62
     85c:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     85e:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     860:	b6 d4       	rcall	.+2412   	; 0x11ce <xTaskIncrementTick>
     862:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     864:	03 d6       	rcall	.+3078   	; 0x146c <vTaskSwitchContext>
     866:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     86a:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     86e:	cd 91       	ld	r28, X+
     870:	cd bf       	out	0x3d, r28	; 61
     872:	dd 91       	ld	r29, X+
     874:	de bf       	out	0x3e, r29	; 62
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	3f 90       	pop	r3
     8b0:	2f 90       	pop	r2
     8b2:	1f 90       	pop	r1
     8b4:	0f 90       	pop	r0
     8b6:	0c be       	out	0x3c, r0	; 60
     8b8:	0f 90       	pop	r0
     8ba:	0b be       	out	0x3b, r0	; 59
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	08 95       	ret

000008c4 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     8c4:	9c df       	rcall	.-200    	; 0x7fe <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     8c6:	18 95       	reti

000008c8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	0f 92       	push	r0
     8ce:	fc 01       	movw	r30, r24
     8d0:	92 8d       	ldd	r25, Z+26	; 0x1a
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	91 11       	cpse	r25, r1
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	08 95       	ret

000008de <prvCopyDataToQueue>:
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
     8e8:	04 2f       	mov	r16, r20
     8ea:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8ec:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8ee:	41 11       	cpse	r20, r1
     8f0:	0b c0       	rjmp	.+22     	; 0x908 <prvCopyDataToQueue+0x2a>
     8f2:	88 81       	ld	r24, Y
     8f4:	99 81       	ldd	r25, Y+1	; 0x01
     8f6:	89 2b       	or	r24, r25
     8f8:	09 f0       	breq	.+2      	; 0x8fc <prvCopyDataToQueue+0x1e>
     8fa:	41 c0       	rjmp	.+130    	; 0x97e <prvCopyDataToQueue+0xa0>
     8fc:	8c 81       	ldd	r24, Y+4	; 0x04
     8fe:	9d 81       	ldd	r25, Y+5	; 0x05
     900:	06 d7       	rcall	.+3596   	; 0x170e <xTaskPriorityDisinherit>
     902:	1d 82       	std	Y+5, r1	; 0x05
     904:	1c 82       	std	Y+4, r1	; 0x04
     906:	42 c0       	rjmp	.+132    	; 0x98c <prvCopyDataToQueue+0xae>
     908:	01 11       	cpse	r16, r1
     90a:	17 c0       	rjmp	.+46     	; 0x93a <prvCopyDataToQueue+0x5c>
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	8a 81       	ldd	r24, Y+2	; 0x02
     910:	9b 81       	ldd	r25, Y+3	; 0x03
     912:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <memcpy>
     916:	2c 8d       	ldd	r18, Y+28	; 0x1c
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	9b 81       	ldd	r25, Y+3	; 0x03
     91c:	82 0f       	add	r24, r18
     91e:	91 1d       	adc	r25, r1
     920:	9b 83       	std	Y+3, r25	; 0x03
     922:	8a 83       	std	Y+2, r24	; 0x02
     924:	2c 81       	ldd	r18, Y+4	; 0x04
     926:	3d 81       	ldd	r19, Y+5	; 0x05
     928:	82 17       	cp	r24, r18
     92a:	93 07       	cpc	r25, r19
     92c:	50 f1       	brcs	.+84     	; 0x982 <prvCopyDataToQueue+0xa4>
     92e:	88 81       	ld	r24, Y
     930:	99 81       	ldd	r25, Y+1	; 0x01
     932:	9b 83       	std	Y+3, r25	; 0x03
     934:	8a 83       	std	Y+2, r24	; 0x02
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	29 c0       	rjmp	.+82     	; 0x98c <prvCopyDataToQueue+0xae>
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	8e 81       	ldd	r24, Y+6	; 0x06
     93e:	9f 81       	ldd	r25, Y+7	; 0x07
     940:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <memcpy>
     944:	8c 8d       	ldd	r24, Y+28	; 0x1c
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	91 95       	neg	r25
     94a:	81 95       	neg	r24
     94c:	91 09       	sbc	r25, r1
     94e:	2e 81       	ldd	r18, Y+6	; 0x06
     950:	3f 81       	ldd	r19, Y+7	; 0x07
     952:	28 0f       	add	r18, r24
     954:	39 1f       	adc	r19, r25
     956:	3f 83       	std	Y+7, r19	; 0x07
     958:	2e 83       	std	Y+6, r18	; 0x06
     95a:	48 81       	ld	r20, Y
     95c:	59 81       	ldd	r21, Y+1	; 0x01
     95e:	24 17       	cp	r18, r20
     960:	35 07       	cpc	r19, r21
     962:	30 f4       	brcc	.+12     	; 0x970 <prvCopyDataToQueue+0x92>
     964:	2c 81       	ldd	r18, Y+4	; 0x04
     966:	3d 81       	ldd	r19, Y+5	; 0x05
     968:	82 0f       	add	r24, r18
     96a:	93 1f       	adc	r25, r19
     96c:	9f 83       	std	Y+7, r25	; 0x07
     96e:	8e 83       	std	Y+6, r24	; 0x06
     970:	02 30       	cpi	r16, 0x02	; 2
     972:	49 f4       	brne	.+18     	; 0x986 <prvCopyDataToQueue+0xa8>
     974:	11 23       	and	r17, r17
     976:	49 f0       	breq	.+18     	; 0x98a <prvCopyDataToQueue+0xac>
     978:	11 50       	subi	r17, 0x01	; 1
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	07 c0       	rjmp	.+14     	; 0x98c <prvCopyDataToQueue+0xae>
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	05 c0       	rjmp	.+10     	; 0x98c <prvCopyDataToQueue+0xae>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	03 c0       	rjmp	.+6      	; 0x98c <prvCopyDataToQueue+0xae>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	01 c0       	rjmp	.+2      	; 0x98c <prvCopyDataToQueue+0xae>
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	1f 5f       	subi	r17, 0xFF	; 255
     98e:	1a 8f       	std	Y+26, r17	; 0x1a
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <prvCopyDataFromQueue>:
     99a:	fc 01       	movw	r30, r24
     99c:	44 8d       	ldd	r20, Z+28	; 0x1c
     99e:	44 23       	and	r20, r20
     9a0:	a9 f0       	breq	.+42     	; 0x9cc <prvCopyDataFromQueue+0x32>
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	26 81       	ldd	r18, Z+6	; 0x06
     9a6:	37 81       	ldd	r19, Z+7	; 0x07
     9a8:	24 0f       	add	r18, r20
     9aa:	35 1f       	adc	r19, r21
     9ac:	37 83       	std	Z+7, r19	; 0x07
     9ae:	26 83       	std	Z+6, r18	; 0x06
     9b0:	84 81       	ldd	r24, Z+4	; 0x04
     9b2:	95 81       	ldd	r25, Z+5	; 0x05
     9b4:	28 17       	cp	r18, r24
     9b6:	39 07       	cpc	r19, r25
     9b8:	20 f0       	brcs	.+8      	; 0x9c2 <prvCopyDataFromQueue+0x28>
     9ba:	80 81       	ld	r24, Z
     9bc:	91 81       	ldd	r25, Z+1	; 0x01
     9be:	97 83       	std	Z+7, r25	; 0x07
     9c0:	86 83       	std	Z+6, r24	; 0x06
     9c2:	cb 01       	movw	r24, r22
     9c4:	66 81       	ldd	r22, Z+6	; 0x06
     9c6:	77 81       	ldd	r23, Z+7	; 0x07
     9c8:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <memcpy>
     9cc:	08 95       	ret

000009ce <prvUnlockQueue>:
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	8c 01       	movw	r16, r24
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	0f 92       	push	r0
     9e0:	fc 01       	movw	r30, r24
     9e2:	c6 8d       	ldd	r28, Z+30	; 0x1e
     9e4:	1c 16       	cp	r1, r28
     9e6:	9c f4       	brge	.+38     	; 0xa0e <prvUnlockQueue+0x40>
     9e8:	81 89       	ldd	r24, Z+17	; 0x11
     9ea:	81 11       	cpse	r24, r1
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <prvUnlockQueue+0x2c>
     9ee:	0f c0       	rjmp	.+30     	; 0xa0e <prvUnlockQueue+0x40>
     9f0:	f8 01       	movw	r30, r16
     9f2:	81 89       	ldd	r24, Z+17	; 0x11
     9f4:	81 11       	cpse	r24, r1
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <prvUnlockQueue+0x34>
     9f8:	0a c0       	rjmp	.+20     	; 0xa0e <prvUnlockQueue+0x40>
     9fa:	78 01       	movw	r14, r16
     9fc:	f1 e1       	ldi	r31, 0x11	; 17
     9fe:	ef 0e       	add	r14, r31
     a00:	f1 1c       	adc	r15, r1
     a02:	c7 01       	movw	r24, r14
     a04:	ea d5       	rcall	.+3028   	; 0x15da <xTaskRemoveFromEventList>
     a06:	81 11       	cpse	r24, r1
     a08:	70 d6       	rcall	.+3296   	; 0x16ea <vTaskMissedYield>
     a0a:	c1 50       	subi	r28, 0x01	; 1
     a0c:	89 f7       	brne	.-30     	; 0x9f0 <prvUnlockQueue+0x22>
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	f8 01       	movw	r30, r16
     a12:	86 8f       	std	Z+30, r24	; 0x1e
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	0f 92       	push	r0
     a1e:	c5 8d       	ldd	r28, Z+29	; 0x1d
     a20:	1c 16       	cp	r1, r28
     a22:	9c f4       	brge	.+38     	; 0xa4a <prvUnlockQueue+0x7c>
     a24:	80 85       	ldd	r24, Z+8	; 0x08
     a26:	81 11       	cpse	r24, r1
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <prvUnlockQueue+0x68>
     a2a:	0f c0       	rjmp	.+30     	; 0xa4a <prvUnlockQueue+0x7c>
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 85       	ldd	r24, Z+8	; 0x08
     a30:	81 11       	cpse	r24, r1
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <prvUnlockQueue+0x70>
     a34:	0a c0       	rjmp	.+20     	; 0xa4a <prvUnlockQueue+0x7c>
     a36:	78 01       	movw	r14, r16
     a38:	f8 e0       	ldi	r31, 0x08	; 8
     a3a:	ef 0e       	add	r14, r31
     a3c:	f1 1c       	adc	r15, r1
     a3e:	c7 01       	movw	r24, r14
     a40:	cc d5       	rcall	.+2968   	; 0x15da <xTaskRemoveFromEventList>
     a42:	81 11       	cpse	r24, r1
     a44:	52 d6       	rcall	.+3236   	; 0x16ea <vTaskMissedYield>
     a46:	c1 50       	subi	r28, 0x01	; 1
     a48:	89 f7       	brne	.-30     	; 0xa2c <prvUnlockQueue+0x5e>
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	f8 01       	movw	r30, r16
     a4e:	85 8f       	std	Z+29, r24	; 0x1d
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	08 95       	ret

00000a60 <xQueueGenericReset>:
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	ec 01       	movw	r28, r24
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	0f 92       	push	r0
     a6c:	e8 81       	ld	r30, Y
     a6e:	f9 81       	ldd	r31, Y+1	; 0x01
     a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a72:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	82 9f       	mul	r24, r18
     a7a:	a0 01       	movw	r20, r0
     a7c:	83 9f       	mul	r24, r19
     a7e:	50 0d       	add	r21, r0
     a80:	92 9f       	mul	r25, r18
     a82:	50 0d       	add	r21, r0
     a84:	11 24       	eor	r1, r1
     a86:	4e 0f       	add	r20, r30
     a88:	5f 1f       	adc	r21, r31
     a8a:	5d 83       	std	Y+5, r21	; 0x05
     a8c:	4c 83       	std	Y+4, r20	; 0x04
     a8e:	1a 8e       	std	Y+26, r1	; 0x1a
     a90:	fb 83       	std	Y+3, r31	; 0x03
     a92:	ea 83       	std	Y+2, r30	; 0x02
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	82 9f       	mul	r24, r18
     a98:	a0 01       	movw	r20, r0
     a9a:	83 9f       	mul	r24, r19
     a9c:	50 0d       	add	r21, r0
     a9e:	92 9f       	mul	r25, r18
     aa0:	50 0d       	add	r21, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	cf 01       	movw	r24, r30
     aa6:	84 0f       	add	r24, r20
     aa8:	95 1f       	adc	r25, r21
     aaa:	9f 83       	std	Y+7, r25	; 0x07
     aac:	8e 83       	std	Y+6, r24	; 0x06
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	8d 8f       	std	Y+29, r24	; 0x1d
     ab2:	8e 8f       	std	Y+30, r24	; 0x1e
     ab4:	61 11       	cpse	r22, r1
     ab6:	0a c0       	rjmp	.+20     	; 0xacc <xQueueGenericReset+0x6c>
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	88 23       	and	r24, r24
     abc:	69 f0       	breq	.+26     	; 0xad8 <xQueueGenericReset+0x78>
     abe:	ce 01       	movw	r24, r28
     ac0:	08 96       	adiw	r24, 0x08	; 8
     ac2:	8b d5       	rcall	.+2838   	; 0x15da <xTaskRemoveFromEventList>
     ac4:	88 23       	and	r24, r24
     ac6:	41 f0       	breq	.+16     	; 0xad8 <xQueueGenericReset+0x78>
     ac8:	3a de       	rcall	.-908    	; 0x73e <vPortYield>
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <xQueueGenericReset+0x78>
     acc:	ce 01       	movw	r24, r28
     ace:	08 96       	adiw	r24, 0x08	; 8
     ad0:	fd dc       	rcall	.-1542   	; 0x4cc <vListInitialise>
     ad2:	ce 01       	movw	r24, r28
     ad4:	41 96       	adiw	r24, 0x11	; 17
     ad6:	fa dc       	rcall	.-1548   	; 0x4cc <vListInitialise>
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <xQueueGenericCreate>:
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	08 2f       	mov	r16, r24
     af0:	16 2f       	mov	r17, r22
     af2:	f4 2e       	mov	r15, r20
     af4:	66 23       	and	r22, r22
     af6:	b9 f0       	breq	.+46     	; 0xb26 <xQueueGenericCreate+0x42>
     af8:	86 9f       	mul	r24, r22
     afa:	c0 01       	movw	r24, r0
     afc:	11 24       	eor	r1, r1
     afe:	81 96       	adiw	r24, 0x21	; 33
     b00:	c7 dc       	rcall	.-1650   	; 0x490 <pvPortMalloc>
     b02:	ec 01       	movw	r28, r24
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	41 f4       	brne	.+16     	; 0xb18 <xQueueGenericCreate+0x34>
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <xQueueGenericCreate+0x4e>
     b0a:	0b 8f       	std	Y+27, r16	; 0x1b
     b0c:	1c 8f       	std	Y+28, r17	; 0x1c
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	ce 01       	movw	r24, r28
     b12:	a6 df       	rcall	.-180    	; 0xa60 <xQueueGenericReset>
     b14:	f8 a2       	std	Y+32, r15	; 0x20
     b16:	0d c0       	rjmp	.+26     	; 0xb32 <xQueueGenericCreate+0x4e>
     b18:	81 96       	adiw	r24, 0x21	; 33
     b1a:	99 83       	std	Y+1, r25	; 0x01
     b1c:	88 83       	st	Y, r24
     b1e:	f5 cf       	rjmp	.-22     	; 0xb0a <xQueueGenericCreate+0x26>
     b20:	d9 83       	std	Y+1, r29	; 0x01
     b22:	c8 83       	st	Y, r28
     b24:	f2 cf       	rjmp	.-28     	; 0xb0a <xQueueGenericCreate+0x26>
     b26:	81 e2       	ldi	r24, 0x21	; 33
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	b2 dc       	rcall	.-1692   	; 0x490 <pvPortMalloc>
     b2c:	ec 01       	movw	r28, r24
     b2e:	89 2b       	or	r24, r25
     b30:	b9 f7       	brne	.-18     	; 0xb20 <xQueueGenericCreate+0x3c>
     b32:	ce 01       	movw	r24, r28
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	08 95       	ret

00000b40 <xQueueGenericSend>:
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	00 d0       	rcall	.+0      	; 0xb58 <xQueueGenericSend+0x18>
     b58:	1f 92       	push	r1
     b5a:	1f 92       	push	r1
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	8c 01       	movw	r16, r24
     b62:	6b 01       	movw	r12, r22
     b64:	5d 83       	std	Y+5, r21	; 0x05
     b66:	4c 83       	std	Y+4, r20	; 0x04
     b68:	a2 2e       	mov	r10, r18
     b6a:	b1 2c       	mov	r11, r1
     b6c:	99 24       	eor	r9, r9
     b6e:	93 94       	inc	r9
     b70:	7c 01       	movw	r14, r24
     b72:	88 e0       	ldi	r24, 0x08	; 8
     b74:	e8 0e       	add	r14, r24
     b76:	f1 1c       	adc	r15, r1
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	0f 92       	push	r0
     b7e:	f8 01       	movw	r30, r16
     b80:	92 8d       	ldd	r25, Z+26	; 0x1a
     b82:	83 8d       	ldd	r24, Z+27	; 0x1b
     b84:	98 17       	cp	r25, r24
     b86:	18 f0       	brcs	.+6      	; 0xb8e <xQueueGenericSend+0x4e>
     b88:	f2 e0       	ldi	r31, 0x02	; 2
     b8a:	af 12       	cpse	r10, r31
     b8c:	15 c0       	rjmp	.+42     	; 0xbb8 <xQueueGenericSend+0x78>
     b8e:	4a 2d       	mov	r20, r10
     b90:	b6 01       	movw	r22, r12
     b92:	c8 01       	movw	r24, r16
     b94:	a4 de       	rcall	.-696    	; 0x8de <prvCopyDataToQueue>
     b96:	f8 01       	movw	r30, r16
     b98:	91 89       	ldd	r25, Z+17	; 0x11
     b9a:	99 23       	and	r25, r25
     b9c:	39 f0       	breq	.+14     	; 0xbac <xQueueGenericSend+0x6c>
     b9e:	c8 01       	movw	r24, r16
     ba0:	41 96       	adiw	r24, 0x11	; 17
     ba2:	1b d5       	rcall	.+2614   	; 0x15da <xTaskRemoveFromEventList>
     ba4:	88 23       	and	r24, r24
     ba6:	21 f0       	breq	.+8      	; 0xbb0 <xQueueGenericSend+0x70>
     ba8:	ca dd       	rcall	.-1132   	; 0x73e <vPortYield>
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <xQueueGenericSend+0x70>
     bac:	81 11       	cpse	r24, r1
     bae:	c7 dd       	rcall	.-1138   	; 0x73e <vPortYield>
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	45 c0       	rjmp	.+138    	; 0xc42 <xQueueGenericSend+0x102>
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	9d 81       	ldd	r25, Y+5	; 0x05
     bbc:	89 2b       	or	r24, r25
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <xQueueGenericSend+0x88>
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	3d c0       	rjmp	.+122    	; 0xc42 <xQueueGenericSend+0x102>
     bc8:	b1 10       	cpse	r11, r1
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <xQueueGenericSend+0x94>
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	4c d5       	rcall	.+2712   	; 0x166a <vTaskInternalSetTimeOutState>
     bd2:	b9 2c       	mov	r11, r9
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	ea d2       	rcall	.+1492   	; 0x11ae <vTaskSuspendAll>
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	0f 92       	push	r0
     be0:	f8 01       	movw	r30, r16
     be2:	85 8d       	ldd	r24, Z+29	; 0x1d
     be4:	8f 3f       	cpi	r24, 0xFF	; 255
     be6:	09 f4       	brne	.+2      	; 0xbea <xQueueGenericSend+0xaa>
     be8:	15 8e       	std	Z+29, r1	; 0x1d
     bea:	f8 01       	movw	r30, r16
     bec:	86 8d       	ldd	r24, Z+30	; 0x1e
     bee:	8f 3f       	cpi	r24, 0xFF	; 255
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <xQueueGenericSend+0xb4>
     bf2:	16 8e       	std	Z+30, r1	; 0x1e
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	be 01       	movw	r22, r28
     bfa:	6c 5f       	subi	r22, 0xFC	; 252
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	3e d5       	rcall	.+2684   	; 0x1680 <xTaskCheckForTimeOut>
     c04:	81 11       	cpse	r24, r1
     c06:	19 c0       	rjmp	.+50     	; 0xc3a <xQueueGenericSend+0xfa>
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	0f 92       	push	r0
     c0e:	f8 01       	movw	r30, r16
     c10:	92 8d       	ldd	r25, Z+26	; 0x1a
     c12:	83 8d       	ldd	r24, Z+27	; 0x1b
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	98 13       	cpse	r25, r24
     c1a:	0b c0       	rjmp	.+22     	; 0xc32 <xQueueGenericSend+0xf2>
     c1c:	6c 81       	ldd	r22, Y+4	; 0x04
     c1e:	7d 81       	ldd	r23, Y+5	; 0x05
     c20:	c7 01       	movw	r24, r14
     c22:	b2 d4       	rcall	.+2404   	; 0x1588 <vTaskPlaceOnEventList>
     c24:	c8 01       	movw	r24, r16
     c26:	d3 de       	rcall	.-602    	; 0x9ce <prvUnlockQueue>
     c28:	89 d3       	rcall	.+1810   	; 0x133c <xTaskResumeAll>
     c2a:	81 11       	cpse	r24, r1
     c2c:	a5 cf       	rjmp	.-182    	; 0xb78 <xQueueGenericSend+0x38>
     c2e:	87 dd       	rcall	.-1266   	; 0x73e <vPortYield>
     c30:	a3 cf       	rjmp	.-186    	; 0xb78 <xQueueGenericSend+0x38>
     c32:	c8 01       	movw	r24, r16
     c34:	cc de       	rcall	.-616    	; 0x9ce <prvUnlockQueue>
     c36:	82 d3       	rcall	.+1796   	; 0x133c <xTaskResumeAll>
     c38:	9f cf       	rjmp	.-194    	; 0xb78 <xQueueGenericSend+0x38>
     c3a:	c8 01       	movw	r24, r16
     c3c:	c8 de       	rcall	.-624    	; 0x9ce <prvUnlockQueue>
     c3e:	7e d3       	rcall	.+1788   	; 0x133c <xTaskResumeAll>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	08 95       	ret

00000c64 <xQueueCreateMutex>:
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	48 2f       	mov	r20, r24
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	3a df       	rcall	.-396    	; 0xae4 <xQueueGenericCreate>
     c70:	ec 01       	movw	r28, r24
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	59 f0       	breq	.+22     	; 0xc8c <xQueueCreateMutex+0x28>
     c76:	1d 82       	std	Y+5, r1	; 0x05
     c78:	1c 82       	std	Y+4, r1	; 0x04
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	18 82       	st	Y, r1
     c7e:	1e 82       	std	Y+6, r1	; 0x06
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	5a df       	rcall	.-332    	; 0xb40 <xQueueGenericSend>
     c8c:	ce 01       	movw	r24, r28
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <xQueueGenericSendFromISR>:
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	8a 01       	movw	r16, r20
     ca2:	fc 01       	movw	r30, r24
     ca4:	52 8d       	ldd	r21, Z+26	; 0x1a
     ca6:	33 8d       	ldd	r19, Z+27	; 0x1b
     ca8:	53 17       	cp	r21, r19
     caa:	10 f0       	brcs	.+4      	; 0xcb0 <xQueueGenericSendFromISR+0x1c>
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	e1 f4       	brne	.+56     	; 0xce8 <xQueueGenericSendFromISR+0x54>
     cb0:	42 2f       	mov	r20, r18
     cb2:	78 01       	movw	r14, r16
     cb4:	ec 01       	movw	r28, r24
     cb6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cb8:	12 de       	rcall	.-988    	; 0x8de <prvCopyDataToQueue>
     cba:	1f 3f       	cpi	r17, 0xFF	; 255
     cbc:	79 f4       	brne	.+30     	; 0xcdc <xQueueGenericSendFromISR+0x48>
     cbe:	89 89       	ldd	r24, Y+17	; 0x11
     cc0:	88 23       	and	r24, r24
     cc2:	a1 f0       	breq	.+40     	; 0xcec <xQueueGenericSendFromISR+0x58>
     cc4:	ce 01       	movw	r24, r28
     cc6:	41 96       	adiw	r24, 0x11	; 17
     cc8:	88 d4       	rcall	.+2320   	; 0x15da <xTaskRemoveFromEventList>
     cca:	88 23       	and	r24, r24
     ccc:	89 f0       	breq	.+34     	; 0xcf0 <xQueueGenericSendFromISR+0x5c>
     cce:	e1 14       	cp	r14, r1
     cd0:	f1 04       	cpc	r15, r1
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <xQueueGenericSendFromISR+0x60>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	f7 01       	movw	r30, r14
     cd8:	80 83       	st	Z, r24
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <xQueueGenericSendFromISR+0x62>
     cdc:	ff 24       	eor	r15, r15
     cde:	f3 94       	inc	r15
     ce0:	f1 0e       	add	r15, r17
     ce2:	fe 8e       	std	Y+30, r15	; 0x1e
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <xQueueGenericSendFromISR+0x62>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <xQueueGenericSendFromISR+0x62>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	03 c0       	rjmp	.+6      	; 0xcf6 <xQueueGenericSendFromISR+0x62>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <xQueueGenericSendFromISR+0x62>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <xQueueReceive>:
     d04:	9f 92       	push	r9
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <xQueueReceive+0x18>
     d1c:	1f 92       	push	r1
     d1e:	1f 92       	push	r1
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	8c 01       	movw	r16, r24
     d26:	5b 01       	movw	r10, r22
     d28:	5d 83       	std	Y+5, r21	; 0x05
     d2a:	4c 83       	std	Y+4, r20	; 0x04
     d2c:	e1 2c       	mov	r14, r1
     d2e:	99 24       	eor	r9, r9
     d30:	93 94       	inc	r9
     d32:	6c 01       	movw	r12, r24
     d34:	81 e1       	ldi	r24, 0x11	; 17
     d36:	c8 0e       	add	r12, r24
     d38:	d1 1c       	adc	r13, r1
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	0f 92       	push	r0
     d40:	f8 01       	movw	r30, r16
     d42:	f2 8c       	ldd	r15, Z+26	; 0x1a
     d44:	ff 20       	and	r15, r15
     d46:	91 f0       	breq	.+36     	; 0xd6c <xQueueReceive+0x68>
     d48:	b5 01       	movw	r22, r10
     d4a:	c8 01       	movw	r24, r16
     d4c:	26 de       	rcall	.-948    	; 0x99a <prvCopyDataFromQueue>
     d4e:	fa 94       	dec	r15
     d50:	f8 01       	movw	r30, r16
     d52:	f2 8e       	std	Z+26, r15	; 0x1a
     d54:	80 85       	ldd	r24, Z+8	; 0x08
     d56:	88 23       	and	r24, r24
     d58:	29 f0       	breq	.+10     	; 0xd64 <xQueueReceive+0x60>
     d5a:	c8 01       	movw	r24, r16
     d5c:	08 96       	adiw	r24, 0x08	; 8
     d5e:	3d d4       	rcall	.+2170   	; 0x15da <xTaskRemoveFromEventList>
     d60:	81 11       	cpse	r24, r1
     d62:	ed dc       	rcall	.-1574   	; 0x73e <vPortYield>
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	44 c0       	rjmp	.+136    	; 0xdf4 <xQueueReceive+0xf0>
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	89 2b       	or	r24, r25
     d72:	21 f4       	brne	.+8      	; 0xd7c <xQueueReceive+0x78>
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	3c c0       	rjmp	.+120    	; 0xdf4 <xQueueReceive+0xf0>
     d7c:	e1 10       	cpse	r14, r1
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <xQueueReceive+0x84>
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	72 d4       	rcall	.+2276   	; 0x166a <vTaskInternalSetTimeOutState>
     d86:	e9 2c       	mov	r14, r9
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	10 d2       	rcall	.+1056   	; 0x11ae <vTaskSuspendAll>
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	0f 92       	push	r0
     d94:	f8 01       	movw	r30, r16
     d96:	85 8d       	ldd	r24, Z+29	; 0x1d
     d98:	8f 3f       	cpi	r24, 0xFF	; 255
     d9a:	09 f4       	brne	.+2      	; 0xd9e <xQueueReceive+0x9a>
     d9c:	15 8e       	std	Z+29, r1	; 0x1d
     d9e:	f8 01       	movw	r30, r16
     da0:	86 8d       	ldd	r24, Z+30	; 0x1e
     da2:	8f 3f       	cpi	r24, 0xFF	; 255
     da4:	09 f4       	brne	.+2      	; 0xda8 <xQueueReceive+0xa4>
     da6:	16 8e       	std	Z+30, r1	; 0x1e
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	be 01       	movw	r22, r28
     dae:	6c 5f       	subi	r22, 0xFC	; 252
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	64 d4       	rcall	.+2248   	; 0x1680 <xTaskCheckForTimeOut>
     db8:	81 11       	cpse	r24, r1
     dba:	13 c0       	rjmp	.+38     	; 0xde2 <xQueueReceive+0xde>
     dbc:	c8 01       	movw	r24, r16
     dbe:	84 dd       	rcall	.-1272   	; 0x8c8 <prvIsQueueEmpty>
     dc0:	88 23       	and	r24, r24
     dc2:	59 f0       	breq	.+22     	; 0xdda <xQueueReceive+0xd6>
     dc4:	6c 81       	ldd	r22, Y+4	; 0x04
     dc6:	7d 81       	ldd	r23, Y+5	; 0x05
     dc8:	c6 01       	movw	r24, r12
     dca:	de d3       	rcall	.+1980   	; 0x1588 <vTaskPlaceOnEventList>
     dcc:	c8 01       	movw	r24, r16
     dce:	ff dd       	rcall	.-1026   	; 0x9ce <prvUnlockQueue>
     dd0:	b5 d2       	rcall	.+1386   	; 0x133c <xTaskResumeAll>
     dd2:	81 11       	cpse	r24, r1
     dd4:	b2 cf       	rjmp	.-156    	; 0xd3a <xQueueReceive+0x36>
     dd6:	b3 dc       	rcall	.-1690   	; 0x73e <vPortYield>
     dd8:	b0 cf       	rjmp	.-160    	; 0xd3a <xQueueReceive+0x36>
     dda:	c8 01       	movw	r24, r16
     ddc:	f8 dd       	rcall	.-1040   	; 0x9ce <prvUnlockQueue>
     dde:	ae d2       	rcall	.+1372   	; 0x133c <xTaskResumeAll>
     de0:	ac cf       	rjmp	.-168    	; 0xd3a <xQueueReceive+0x36>
     de2:	c8 01       	movw	r24, r16
     de4:	f4 dd       	rcall	.-1048   	; 0x9ce <prvUnlockQueue>
     de6:	aa d2       	rcall	.+1364   	; 0x133c <xTaskResumeAll>
     de8:	c8 01       	movw	r24, r16
     dea:	6e dd       	rcall	.-1316   	; 0x8c8 <prvIsQueueEmpty>
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <xQueueReceive+0xee>
     df0:	a4 cf       	rjmp	.-184    	; 0xd3a <xQueueReceive+0x36>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	9f 90       	pop	r9
     e14:	08 95       	ret

00000e16 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	0f 92       	push	r0
     e22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	09 f4       	brne	.+2      	; 0xe2a <vQueueWaitForMessageRestricted+0x14>
     e28:	1d 8e       	std	Y+29, r1	; 0x1d
     e2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2c:	8f 3f       	cpi	r24, 0xFF	; 255
     e2e:	09 f4       	brne	.+2      	; 0xe32 <vQueueWaitForMessageRestricted+0x1c>
     e30:	1e 8e       	std	Y+30, r1	; 0x1e
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e36:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e38:	81 11       	cpse	r24, r1
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e3c:	ce 01       	movw	r24, r28
     e3e:	41 96       	adiw	r24, 0x11	; 17
     e40:	b4 d3       	rcall	.+1896   	; 0x15aa <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     e42:	ce 01       	movw	r24, r28
     e44:	c4 dd       	rcall	.-1144   	; 0x9ce <prvUnlockQueue>
    }
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <prvResetNextTaskUnblockTime>:
     e4c:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <pxDelayedTaskList>
     e50:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <pxDelayedTaskList+0x1>
     e54:	80 81       	ld	r24, Z
     e56:	81 11       	cpse	r24, r1
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <prvResetNextTaskUnblockTime+0x1c>
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	9f ef       	ldi	r25, 0xFF	; 255
     e5e:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <xNextTaskUnblockTime+0x1>
     e62:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xNextTaskUnblockTime>
     e66:	08 95       	ret
     e68:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <pxDelayedTaskList>
     e6c:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <pxDelayedTaskList+0x1>
     e70:	05 80       	ldd	r0, Z+5	; 0x05
     e72:	f6 81       	ldd	r31, Z+6	; 0x06
     e74:	e0 2d       	mov	r30, r0
     e76:	06 80       	ldd	r0, Z+6	; 0x06
     e78:	f7 81       	ldd	r31, Z+7	; 0x07
     e7a:	e0 2d       	mov	r30, r0
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <xNextTaskUnblockTime+0x1>
     e84:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xNextTaskUnblockTime>
     e88:	08 95       	ret

00000e8a <prvAddCurrentTaskToDelayedList>:
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
     e96:	f6 2e       	mov	r15, r22
     e98:	00 91 37 02 	lds	r16, 0x0237	; 0x800237 <xTickCount>
     e9c:	10 91 38 02 	lds	r17, 0x0238	; 0x800238 <xTickCount+0x1>
     ea0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pxCurrentTCB>
     ea4:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     ea8:	02 96       	adiw	r24, 0x02	; 2
     eaa:	74 db       	rcall	.-2328   	; 0x594 <uxListRemove>
     eac:	cf 3f       	cpi	r28, 0xFF	; 255
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	d8 07       	cpc	r29, r24
     eb2:	61 f4       	brne	.+24     	; 0xecc <prvAddCurrentTaskToDelayedList+0x42>
     eb4:	ff 20       	and	r15, r15
     eb6:	51 f0       	breq	.+20     	; 0xecc <prvAddCurrentTaskToDelayedList+0x42>
     eb8:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <pxCurrentTCB>
     ebc:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     ec0:	6e 5f       	subi	r22, 0xFE	; 254
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8a e3       	ldi	r24, 0x3A	; 58
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	13 db       	rcall	.-2522   	; 0x4f0 <vListInsertEnd>
     eca:	2d c0       	rjmp	.+90     	; 0xf26 <prvAddCurrentTaskToDelayedList+0x9c>
     ecc:	c0 0f       	add	r28, r16
     ece:	d1 1f       	adc	r29, r17
     ed0:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
     ed4:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     ed8:	d3 83       	std	Z+3, r29	; 0x03
     eda:	c2 83       	std	Z+2, r28	; 0x02
     edc:	c0 17       	cp	r28, r16
     ede:	d1 07       	cpc	r29, r17
     ee0:	60 f4       	brcc	.+24     	; 0xefa <prvAddCurrentTaskToDelayedList+0x70>
     ee2:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <pxCurrentTCB>
     ee6:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     eea:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <pxOverflowDelayedTaskList>
     eee:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <pxOverflowDelayedTaskList+0x1>
     ef2:	6e 5f       	subi	r22, 0xFE	; 254
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	1d db       	rcall	.-2502   	; 0x532 <vListInsert>
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <prvAddCurrentTaskToDelayedList+0x9c>
     efa:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <pxCurrentTCB>
     efe:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
     f02:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <pxDelayedTaskList>
     f06:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <pxDelayedTaskList+0x1>
     f0a:	6e 5f       	subi	r22, 0xFE	; 254
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	11 db       	rcall	.-2526   	; 0x532 <vListInsert>
     f10:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <xNextTaskUnblockTime>
     f14:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <xNextTaskUnblockTime+0x1>
     f18:	c8 17       	cp	r28, r24
     f1a:	d9 07       	cpc	r29, r25
     f1c:	20 f4       	brcc	.+8      	; 0xf26 <prvAddCurrentTaskToDelayedList+0x9c>
     f1e:	d0 93 30 02 	sts	0x0230, r29	; 0x800230 <xNextTaskUnblockTime+0x1>
     f22:	c0 93 2f 02 	sts	0x022F, r28	; 0x80022f <xNextTaskUnblockTime>
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	08 95       	ret

00000f32 <xTaskCreate>:
     f32:	4f 92       	push	r4
     f34:	5f 92       	push	r5
     f36:	6f 92       	push	r6
     f38:	7f 92       	push	r7
     f3a:	8f 92       	push	r8
     f3c:	9f 92       	push	r9
     f3e:	af 92       	push	r10
     f40:	bf 92       	push	r11
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	4c 01       	movw	r8, r24
     f52:	6b 01       	movw	r12, r22
     f54:	5a 01       	movw	r10, r20
     f56:	29 01       	movw	r4, r18
     f58:	ca 01       	movw	r24, r20
     f5a:	9a da       	rcall	.-2764   	; 0x490 <pvPortMalloc>
     f5c:	3c 01       	movw	r6, r24
     f5e:	89 2b       	or	r24, r25
     f60:	09 f4       	brne	.+2      	; 0xf64 <xTaskCreate+0x32>
     f62:	e3 c0       	rjmp	.+454    	; 0x112a <xTaskCreate+0x1f8>
     f64:	8c e2       	ldi	r24, 0x2C	; 44
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	93 da       	rcall	.-2778   	; 0x490 <pvPortMalloc>
     f6a:	ec 01       	movw	r28, r24
     f6c:	89 2b       	or	r24, r25
     f6e:	91 f0       	breq	.+36     	; 0xf94 <xTaskCreate+0x62>
     f70:	78 8e       	std	Y+24, r7	; 0x18
     f72:	6f 8a       	std	Y+23, r6	; 0x17
     f74:	a5 01       	movw	r20, r10
     f76:	65 ea       	ldi	r22, 0xA5	; 165
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	c3 01       	movw	r24, r6
     f7c:	7e d6       	rcall	.+3324   	; 0x1c7a <memset>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	a8 1a       	sub	r10, r24
     f82:	b1 08       	sbc	r11, r1
     f84:	8f 89       	ldd	r24, Y+23	; 0x17
     f86:	98 8d       	ldd	r25, Y+24	; 0x18
     f88:	a8 0e       	add	r10, r24
     f8a:	b9 1e       	adc	r11, r25
     f8c:	c1 14       	cp	r12, r1
     f8e:	d1 04       	cpc	r13, r1
     f90:	21 f4       	brne	.+8      	; 0xf9a <xTaskCreate+0x68>
     f92:	1f c0       	rjmp	.+62     	; 0xfd2 <xTaskCreate+0xa0>
     f94:	c3 01       	movw	r24, r6
     f96:	8d da       	rcall	.-2790   	; 0x4b2 <vPortFree>
     f98:	c8 c0       	rjmp	.+400    	; 0x112a <xTaskCreate+0x1f8>
     f9a:	d6 01       	movw	r26, r12
     f9c:	8c 91       	ld	r24, X
     f9e:	89 8f       	std	Y+25, r24	; 0x19
     fa0:	8c 91       	ld	r24, X
     fa2:	88 23       	and	r24, r24
     fa4:	a1 f0       	breq	.+40     	; 0xfce <xTaskCreate+0x9c>
     fa6:	ae 01       	movw	r20, r28
     fa8:	46 5e       	subi	r20, 0xE6	; 230
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	f6 01       	movw	r30, r12
     fae:	31 96       	adiw	r30, 0x01	; 1
     fb0:	b8 e0       	ldi	r27, 0x08	; 8
     fb2:	cb 0e       	add	r12, r27
     fb4:	d1 1c       	adc	r13, r1
     fb6:	cf 01       	movw	r24, r30
     fb8:	21 91       	ld	r18, Z+
     fba:	da 01       	movw	r26, r20
     fbc:	2d 93       	st	X+, r18
     fbe:	ad 01       	movw	r20, r26
     fc0:	dc 01       	movw	r26, r24
     fc2:	8c 91       	ld	r24, X
     fc4:	88 23       	and	r24, r24
     fc6:	19 f0       	breq	.+6      	; 0xfce <xTaskCreate+0x9c>
     fc8:	ec 15       	cp	r30, r12
     fca:	fd 05       	cpc	r31, r13
     fcc:	a1 f7       	brne	.-24     	; 0xfb6 <xTaskCreate+0x84>
     fce:	18 a2       	std	Y+32, r1	; 0x20
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <xTaskCreate+0xa2>
     fd2:	19 8e       	std	Y+25, r1	; 0x19
     fd4:	04 30       	cpi	r16, 0x04	; 4
     fd6:	08 f0       	brcs	.+2      	; 0xfda <xTaskCreate+0xa8>
     fd8:	03 e0       	ldi	r16, 0x03	; 3
     fda:	0e 8b       	std	Y+22, r16	; 0x16
     fdc:	0b a3       	std	Y+35, r16	; 0x23
     fde:	1c a2       	std	Y+36, r1	; 0x24
     fe0:	6e 01       	movw	r12, r28
     fe2:	b2 e0       	ldi	r27, 0x02	; 2
     fe4:	cb 0e       	add	r12, r27
     fe6:	d1 1c       	adc	r13, r1
     fe8:	c6 01       	movw	r24, r12
     fea:	7e da       	rcall	.-2820   	; 0x4e8 <vListInitialiseItem>
     fec:	ce 01       	movw	r24, r28
     fee:	0c 96       	adiw	r24, 0x0c	; 12
     ff0:	7b da       	rcall	.-2826   	; 0x4e8 <vListInitialiseItem>
     ff2:	d9 87       	std	Y+9, r29	; 0x09
     ff4:	c8 87       	std	Y+8, r28	; 0x08
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	80 1b       	sub	r24, r16
     ffc:	91 09       	sbc	r25, r1
     ffe:	9d 87       	std	Y+13, r25	; 0x0d
    1000:	8c 87       	std	Y+12, r24	; 0x0c
    1002:	db 8b       	std	Y+19, r29	; 0x13
    1004:	ca 8b       	std	Y+18, r28	; 0x12
    1006:	1e a2       	std	Y+38, r1	; 0x26
    1008:	1d a2       	std	Y+37, r1	; 0x25
    100a:	1f a2       	std	Y+39, r1	; 0x27
    100c:	18 a6       	std	Y+40, r1	; 0x28
    100e:	19 a6       	std	Y+41, r1	; 0x29
    1010:	1a a6       	std	Y+42, r1	; 0x2a
    1012:	1b a6       	std	Y+43, r1	; 0x2b
    1014:	a2 01       	movw	r20, r4
    1016:	b4 01       	movw	r22, r8
    1018:	c5 01       	movw	r24, r10
    101a:	e3 da       	rcall	.-2618   	; 0x5e2 <pxPortInitialiseStack>
    101c:	99 83       	std	Y+1, r25	; 0x01
    101e:	88 83       	st	Y, r24
    1020:	e1 14       	cp	r14, r1
    1022:	f1 04       	cpc	r15, r1
    1024:	19 f0       	breq	.+6      	; 0x102c <xTaskCreate+0xfa>
    1026:	f7 01       	movw	r30, r14
    1028:	d1 83       	std	Z+1, r29	; 0x01
    102a:	c0 83       	st	Z, r28
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
    1032:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <uxCurrentNumberOfTasks>
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <uxCurrentNumberOfTasks>
    103c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pxCurrentTCB>
    1040:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    1044:	89 2b       	or	r24, r25
    1046:	89 f5       	brne	.+98     	; 0x10aa <xTaskCreate+0x178>
    1048:	d0 93 91 02 	sts	0x0291, r29	; 0x800291 <pxCurrentTCB+0x1>
    104c:	c0 93 90 02 	sts	0x0290, r28	; 0x800290 <pxCurrentTCB>
    1050:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <uxCurrentNumberOfTasks>
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <xTaskCreate+0x128>
    1058:	38 c0       	rjmp	.+112    	; 0x10ca <xTaskCreate+0x198>
    105a:	8c e6       	ldi	r24, 0x6C	; 108
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	36 da       	rcall	.-2964   	; 0x4cc <vListInitialise>
    1060:	85 e7       	ldi	r24, 0x75	; 117
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	33 da       	rcall	.-2970   	; 0x4cc <vListInitialise>
    1066:	8e e7       	ldi	r24, 0x7E	; 126
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	30 da       	rcall	.-2976   	; 0x4cc <vListInitialise>
    106c:	87 e8       	ldi	r24, 0x87	; 135
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	2d da       	rcall	.-2982   	; 0x4cc <vListInitialise>
    1072:	83 e6       	ldi	r24, 0x63	; 99
    1074:	92 e0       	ldi	r25, 0x02	; 2
    1076:	2a da       	rcall	.-2988   	; 0x4cc <vListInitialise>
    1078:	8a e5       	ldi	r24, 0x5A	; 90
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	27 da       	rcall	.-2994   	; 0x4cc <vListInitialise>
    107e:	8d e4       	ldi	r24, 0x4D	; 77
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	24 da       	rcall	.-3000   	; 0x4cc <vListInitialise>
    1084:	84 e4       	ldi	r24, 0x44	; 68
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	21 da       	rcall	.-3006   	; 0x4cc <vListInitialise>
    108a:	8a e3       	ldi	r24, 0x3A	; 58
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	1e da       	rcall	.-3012   	; 0x4cc <vListInitialise>
    1090:	83 e6       	ldi	r24, 0x63	; 99
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <pxDelayedTaskList+0x1>
    1098:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <pxDelayedTaskList>
    109c:	8a e5       	ldi	r24, 0x5A	; 90
    109e:	92 e0       	ldi	r25, 0x02	; 2
    10a0:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <pxOverflowDelayedTaskList+0x1>
    10a4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <pxOverflowDelayedTaskList>
    10a8:	10 c0       	rjmp	.+32     	; 0x10ca <xTaskCreate+0x198>
    10aa:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <xSchedulerRunning>
    10ae:	81 11       	cpse	r24, r1
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <xTaskCreate+0x198>
    10b2:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    10b6:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    10ba:	96 89       	ldd	r25, Z+22	; 0x16
    10bc:	8e 89       	ldd	r24, Y+22	; 0x16
    10be:	89 17       	cp	r24, r25
    10c0:	20 f0       	brcs	.+8      	; 0x10ca <xTaskCreate+0x198>
    10c2:	d0 93 91 02 	sts	0x0291, r29	; 0x800291 <pxCurrentTCB+0x1>
    10c6:	c0 93 90 02 	sts	0x0290, r28	; 0x800290 <pxCurrentTCB>
    10ca:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <uxTaskNumber>
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <uxTaskNumber>
    10d4:	89 a3       	std	Y+33, r24	; 0x21
    10d6:	8e 89       	ldd	r24, Y+22	; 0x16
    10d8:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <uxTopReadyPriority>
    10dc:	98 17       	cp	r25, r24
    10de:	10 f4       	brcc	.+4      	; 0x10e4 <xTaskCreate+0x1b2>
    10e0:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <uxTopReadyPriority>
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9c 01       	movw	r18, r24
    10e8:	22 0f       	add	r18, r18
    10ea:	33 1f       	adc	r19, r19
    10ec:	22 0f       	add	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	b6 01       	movw	r22, r12
    10fa:	84 59       	subi	r24, 0x94	; 148
    10fc:	9d 4f       	sbci	r25, 0xFD	; 253
    10fe:	f8 d9       	rcall	.-3088   	; 0x4f0 <vListInsertEnd>
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <xSchedulerRunning>
    1108:	88 23       	and	r24, r24
    110a:	59 f0       	breq	.+22     	; 0x1122 <xTaskCreate+0x1f0>
    110c:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    1110:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    1114:	96 89       	ldd	r25, Z+22	; 0x16
    1116:	8e 89       	ldd	r24, Y+22	; 0x16
    1118:	98 17       	cp	r25, r24
    111a:	28 f4       	brcc	.+10     	; 0x1126 <xTaskCreate+0x1f4>
    111c:	10 db       	rcall	.-2528   	; 0x73e <vPortYield>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	05 c0       	rjmp	.+10     	; 0x112c <xTaskCreate+0x1fa>
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	03 c0       	rjmp	.+6      	; 0x112c <xTaskCreate+0x1fa>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	01 c0       	rjmp	.+2      	; 0x112c <xTaskCreate+0x1fa>
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	7f 90       	pop	r7
    1144:	6f 90       	pop	r6
    1146:	5f 90       	pop	r5
    1148:	4f 90       	pop	r4
    114a:	08 95       	ret

0000114c <vTaskStartScheduler>:
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	0f 2e       	mov	r0, r31
    1154:	fd e2       	ldi	r31, 0x2D	; 45
    1156:	ef 2e       	mov	r14, r31
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	ff 2e       	mov	r15, r31
    115c:	f0 2d       	mov	r31, r0
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 ec       	ldi	r20, 0xC0	; 192
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	6e e1       	ldi	r22, 0x1E	; 30
    116a:	72 e0       	ldi	r23, 0x02	; 2
    116c:	8c e7       	ldi	r24, 0x7C	; 124
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	e0 de       	rcall	.-576    	; 0xf32 <xTaskCreate>
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	c1 f4       	brne	.+48     	; 0x11a6 <vTaskStartScheduler+0x5a>
    1176:	62 d3       	rcall	.+1732   	; 0x183c <xTimerCreateTimerTask>
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	a9 f4       	brne	.+42     	; 0x11a6 <vTaskStartScheduler+0x5a>
    117c:	f8 94       	cli
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <xNextTaskUnblockTime+0x1>
    1186:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xNextTaskUnblockTime>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <xSchedulerRunning>
    1190:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <xTickCount+0x1>
    1194:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <xTickCount>
    1198:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    119c:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    11a0:	85 a1       	ldd	r24, Z+37	; 0x25
    11a2:	66 d9       	rcall	.-3380   	; 0x470 <task_switch_in>
    11a4:	90 da       	rcall	.-2784   	; 0x6c6 <xPortStartScheduler>
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <vTaskSuspendAll>:
    11ae:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end>
    11b8:	08 95       	ret

000011ba <xTaskGetTickCount>:
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	0f 92       	push	r0
    11c0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <xTickCount>
    11c4:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <xTickCount+0x1>
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	08 95       	ret

000011ce <xTaskIncrementTick>:
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    11e2:	81 11       	cpse	r24, r1
    11e4:	95 c0       	rjmp	.+298    	; 0x1310 <xTaskIncrementTick+0x142>
    11e6:	e0 90 37 02 	lds	r14, 0x0237	; 0x800237 <xTickCount>
    11ea:	f0 90 38 02 	lds	r15, 0x0238	; 0x800238 <xTickCount+0x1>
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	e8 1a       	sub	r14, r24
    11f2:	f8 0a       	sbc	r15, r24
    11f4:	f0 92 38 02 	sts	0x0238, r15	; 0x800238 <xTickCount+0x1>
    11f8:	e0 92 37 02 	sts	0x0237, r14	; 0x800237 <xTickCount>
    11fc:	e1 14       	cp	r14, r1
    11fe:	f1 04       	cpc	r15, r1
    1200:	b1 f4       	brne	.+44     	; 0x122e <xTaskIncrementTick+0x60>
    1202:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <pxDelayedTaskList>
    1206:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <pxDelayedTaskList+0x1>
    120a:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <pxOverflowDelayedTaskList>
    120e:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <pxOverflowDelayedTaskList+0x1>
    1212:	30 93 59 02 	sts	0x0259, r19	; 0x800259 <pxDelayedTaskList+0x1>
    1216:	20 93 58 02 	sts	0x0258, r18	; 0x800258 <pxDelayedTaskList>
    121a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <pxOverflowDelayedTaskList+0x1>
    121e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <pxOverflowDelayedTaskList>
    1222:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <xNumOfOverflows>
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <xNumOfOverflows>
    122c:	0f de       	rcall	.-994    	; 0xe4c <prvResetNextTaskUnblockTime>
    122e:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <xNextTaskUnblockTime>
    1232:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <xNextTaskUnblockTime+0x1>
    1236:	e8 16       	cp	r14, r24
    1238:	f9 06       	cpc	r15, r25
    123a:	10 f4       	brcc	.+4      	; 0x1240 <xTaskIncrementTick+0x72>
    123c:	d1 2c       	mov	r13, r1
    123e:	50 c0       	rjmp	.+160    	; 0x12e0 <xTaskIncrementTick+0x112>
    1240:	d1 2c       	mov	r13, r1
    1242:	cc 24       	eor	r12, r12
    1244:	c3 94       	inc	r12
    1246:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <pxDelayedTaskList>
    124a:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <pxDelayedTaskList+0x1>
    124e:	80 81       	ld	r24, Z
    1250:	81 11       	cpse	r24, r1
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <xTaskIncrementTick+0x94>
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	9f ef       	ldi	r25, 0xFF	; 255
    1258:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <xNextTaskUnblockTime+0x1>
    125c:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xNextTaskUnblockTime>
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <xTaskIncrementTick+0x112>
    1262:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <pxDelayedTaskList>
    1266:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <pxDelayedTaskList+0x1>
    126a:	05 80       	ldd	r0, Z+5	; 0x05
    126c:	f6 81       	ldd	r31, Z+6	; 0x06
    126e:	e0 2d       	mov	r30, r0
    1270:	c6 81       	ldd	r28, Z+6	; 0x06
    1272:	d7 81       	ldd	r29, Z+7	; 0x07
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	9b 81       	ldd	r25, Y+3	; 0x03
    1278:	e8 16       	cp	r14, r24
    127a:	f9 06       	cpc	r15, r25
    127c:	28 f4       	brcc	.+10     	; 0x1288 <xTaskIncrementTick+0xba>
    127e:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <xNextTaskUnblockTime+0x1>
    1282:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <xNextTaskUnblockTime>
    1286:	2c c0       	rjmp	.+88     	; 0x12e0 <xTaskIncrementTick+0x112>
    1288:	8e 01       	movw	r16, r28
    128a:	0e 5f       	subi	r16, 0xFE	; 254
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	c8 01       	movw	r24, r16
    1290:	81 d9       	rcall	.-3326   	; 0x594 <uxListRemove>
    1292:	8c 89       	ldd	r24, Y+20	; 0x14
    1294:	9d 89       	ldd	r25, Y+21	; 0x15
    1296:	89 2b       	or	r24, r25
    1298:	19 f0       	breq	.+6      	; 0x12a0 <xTaskIncrementTick+0xd2>
    129a:	ce 01       	movw	r24, r28
    129c:	0c 96       	adiw	r24, 0x0c	; 12
    129e:	7a d9       	rcall	.-3340   	; 0x594 <uxListRemove>
    12a0:	8e 89       	ldd	r24, Y+22	; 0x16
    12a2:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <uxTopReadyPriority>
    12a6:	98 17       	cp	r25, r24
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <xTaskIncrementTick+0xe0>
    12aa:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <uxTopReadyPriority>
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 01       	movw	r18, r24
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	b8 01       	movw	r22, r16
    12c4:	84 59       	subi	r24, 0x94	; 148
    12c6:	9d 4f       	sbci	r25, 0xFD	; 253
    12c8:	13 d9       	rcall	.-3546   	; 0x4f0 <vListInsertEnd>
    12ca:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    12ce:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    12d2:	9e 89       	ldd	r25, Y+22	; 0x16
    12d4:	86 89       	ldd	r24, Z+22	; 0x16
    12d6:	98 17       	cp	r25, r24
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <xTaskIncrementTick+0x10e>
    12da:	b5 cf       	rjmp	.-150    	; 0x1246 <xTaskIncrementTick+0x78>
    12dc:	dc 2c       	mov	r13, r12
    12de:	b3 cf       	rjmp	.-154    	; 0x1246 <xTaskIncrementTick+0x78>
    12e0:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    12e4:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    12e8:	86 89       	ldd	r24, Z+22	; 0x16
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	fc 01       	movw	r30, r24
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	8e 0f       	add	r24, r30
    12fc:	9f 1f       	adc	r25, r31
    12fe:	fc 01       	movw	r30, r24
    1300:	e4 59       	subi	r30, 0x94	; 148
    1302:	fd 4f       	sbci	r31, 0xFD	; 253
    1304:	80 81       	ld	r24, Z
    1306:	82 30       	cpi	r24, 0x02	; 2
    1308:	48 f0       	brcs	.+18     	; 0x131c <xTaskIncrementTick+0x14e>
    130a:	dd 24       	eor	r13, r13
    130c:	d3 94       	inc	r13
    130e:	06 c0       	rjmp	.+12     	; 0x131c <xTaskIncrementTick+0x14e>
    1310:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <uxPendedTicks>
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <uxPendedTicks>
    131a:	d1 2c       	mov	r13, r1
    131c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <xYieldPending>
    1320:	88 23       	and	r24, r24
    1322:	11 f0       	breq	.+4      	; 0x1328 <xTaskIncrementTick+0x15a>
    1324:	dd 24       	eor	r13, r13
    1326:	d3 94       	inc	r13
    1328:	8d 2d       	mov	r24, r13
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	08 95       	ret

0000133c <xTaskResumeAll>:
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	0f 92       	push	r0
    1350:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    1354:	81 50       	subi	r24, 0x01	; 1
    1356:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end>
    135a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    135e:	81 11       	cpse	r24, r1
    1360:	59 c0       	rjmp	.+178    	; 0x1414 <xTaskResumeAll+0xd8>
    1362:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <uxCurrentNumberOfTasks>
    1366:	81 11       	cpse	r24, r1
    1368:	30 c0       	rjmp	.+96     	; 0x13ca <xTaskResumeAll+0x8e>
    136a:	57 c0       	rjmp	.+174    	; 0x141a <xTaskResumeAll+0xde>
    136c:	d7 01       	movw	r26, r14
    136e:	15 96       	adiw	r26, 0x05	; 5
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	16 97       	sbiw	r26, 0x06	; 6
    1376:	c6 81       	ldd	r28, Z+6	; 0x06
    1378:	d7 81       	ldd	r29, Z+7	; 0x07
    137a:	ce 01       	movw	r24, r28
    137c:	0c 96       	adiw	r24, 0x0c	; 12
    137e:	0a d9       	rcall	.-3564   	; 0x594 <uxListRemove>
    1380:	8e 01       	movw	r16, r28
    1382:	0e 5f       	subi	r16, 0xFE	; 254
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	c8 01       	movw	r24, r16
    1388:	05 d9       	rcall	.-3574   	; 0x594 <uxListRemove>
    138a:	8e 89       	ldd	r24, Y+22	; 0x16
    138c:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <uxTopReadyPriority>
    1390:	98 17       	cp	r25, r24
    1392:	10 f4       	brcc	.+4      	; 0x1398 <xTaskResumeAll+0x5c>
    1394:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <uxTopReadyPriority>
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9c 01       	movw	r18, r24
    139c:	22 0f       	add	r18, r18
    139e:	33 1f       	adc	r19, r19
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	b8 01       	movw	r22, r16
    13ae:	84 59       	subi	r24, 0x94	; 148
    13b0:	9d 4f       	sbci	r25, 0xFD	; 253
    13b2:	9e d8       	rcall	.-3780   	; 0x4f0 <vListInsertEnd>
    13b4:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    13b8:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    13bc:	9e 89       	ldd	r25, Y+22	; 0x16
    13be:	86 89       	ldd	r24, Z+22	; 0x16
    13c0:	98 17       	cp	r25, r24
    13c2:	68 f0       	brcs	.+26     	; 0x13de <xTaskResumeAll+0xa2>
    13c4:	d0 92 33 02 	sts	0x0233, r13	; 0x800233 <xYieldPending>
    13c8:	0a c0       	rjmp	.+20     	; 0x13de <xTaskResumeAll+0xa2>
    13ca:	c0 e0       	ldi	r28, 0x00	; 0
    13cc:	d0 e0       	ldi	r29, 0x00	; 0
    13ce:	0f 2e       	mov	r0, r31
    13d0:	fd e4       	ldi	r31, 0x4D	; 77
    13d2:	ef 2e       	mov	r14, r31
    13d4:	f2 e0       	ldi	r31, 0x02	; 2
    13d6:	ff 2e       	mov	r15, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	dd 24       	eor	r13, r13
    13dc:	d3 94       	inc	r13
    13de:	f7 01       	movw	r30, r14
    13e0:	80 81       	ld	r24, Z
    13e2:	81 11       	cpse	r24, r1
    13e4:	c3 cf       	rjmp	.-122    	; 0x136c <xTaskResumeAll+0x30>
    13e6:	cd 2b       	or	r28, r29
    13e8:	09 f0       	breq	.+2      	; 0x13ec <xTaskResumeAll+0xb0>
    13ea:	30 dd       	rcall	.-1440   	; 0xe4c <prvResetNextTaskUnblockTime>
    13ec:	c0 91 34 02 	lds	r28, 0x0234	; 0x800234 <uxPendedTicks>
    13f0:	cc 23       	and	r28, r28
    13f2:	49 f0       	breq	.+18     	; 0x1406 <xTaskResumeAll+0xca>
    13f4:	d1 e0       	ldi	r29, 0x01	; 1
    13f6:	eb de       	rcall	.-554    	; 0x11ce <xTaskIncrementTick>
    13f8:	81 11       	cpse	r24, r1
    13fa:	d0 93 33 02 	sts	0x0233, r29	; 0x800233 <xYieldPending>
    13fe:	c1 50       	subi	r28, 0x01	; 1
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <xTaskResumeAll+0xba>
    1402:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <uxPendedTicks>
    1406:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <xYieldPending>
    140a:	88 23       	and	r24, r24
    140c:	29 f0       	breq	.+10     	; 0x1418 <xTaskResumeAll+0xdc>
    140e:	97 d9       	rcall	.-3282   	; 0x73e <vPortYield>
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	03 c0       	rjmp	.+6      	; 0x141a <xTaskResumeAll+0xde>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	01 c0       	rjmp	.+2      	; 0x141a <xTaskResumeAll+0xde>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	08 95       	ret

0000142e <vTaskDelay>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
    1434:	89 2b       	or	r24, r25
    1436:	39 f0       	breq	.+14     	; 0x1446 <vTaskDelay+0x18>
    1438:	ba de       	rcall	.-652    	; 0x11ae <vTaskSuspendAll>
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	25 dd       	rcall	.-1462   	; 0xe8a <prvAddCurrentTaskToDelayedList>
    1440:	7d df       	rcall	.-262    	; 0x133c <xTaskResumeAll>
    1442:	81 11       	cpse	r24, r1
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <vTaskDelay+0x1a>
    1446:	7b d9       	rcall	.-3338   	; 0x73e <vPortYield>
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <vTaskSetApplicationTaskTag>:
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	21 f4       	brne	.+8      	; 0x145a <vTaskSetApplicationTaskTag+0xc>
    1452:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pxCurrentTCB>
    1456:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	0f 92       	push	r0
    1460:	fc 01       	movw	r30, r24
    1462:	76 a3       	std	Z+38, r23	; 0x26
    1464:	65 a3       	std	Z+37, r22	; 0x25
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	08 95       	ret

0000146c <vTaskSwitchContext>:
    146c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    1470:	88 23       	and	r24, r24
    1472:	21 f0       	breq	.+8      	; 0x147c <vTaskSwitchContext+0x10>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <xYieldPending>
    147a:	08 95       	ret
    147c:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <xYieldPending>
    1480:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    1484:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    1488:	85 a1       	ldd	r24, Z+37	; 0x25
    148a:	0e 94 42 02 	call	0x484	; 0x484 <task_switch_out>
    148e:	a0 91 90 02 	lds	r26, 0x0290	; 0x800290 <pxCurrentTCB>
    1492:	b0 91 91 02 	lds	r27, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    1496:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    149a:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    149e:	2d 91       	ld	r18, X+
    14a0:	3c 91       	ld	r19, X
    14a2:	87 89       	ldd	r24, Z+23	; 0x17
    14a4:	90 8d       	ldd	r25, Z+24	; 0x18
    14a6:	82 17       	cp	r24, r18
    14a8:	93 07       	cpc	r25, r19
    14aa:	58 f0       	brcs	.+22     	; 0x14c2 <vTaskSwitchContext+0x56>
    14ac:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <pxCurrentTCB>
    14b0:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    14b4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pxCurrentTCB>
    14b8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    14bc:	67 5e       	subi	r22, 0xE7	; 231
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	9d d2       	rcall	.+1338   	; 0x19fc <vApplicationStackOverflowHook>
    14c2:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <uxTopReadyPriority>
    14c6:	82 2f       	mov	r24, r18
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	fc 01       	movw	r30, r24
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	ee 0f       	add	r30, r30
    14d6:	ff 1f       	adc	r31, r31
    14d8:	e8 0f       	add	r30, r24
    14da:	f9 1f       	adc	r31, r25
    14dc:	e4 59       	subi	r30, 0x94	; 148
    14de:	fd 4f       	sbci	r31, 0xFD	; 253
    14e0:	30 81       	ld	r19, Z
    14e2:	31 11       	cpse	r19, r1
    14e4:	11 c0       	rjmp	.+34     	; 0x1508 <vTaskSwitchContext+0x9c>
    14e6:	21 50       	subi	r18, 0x01	; 1
    14e8:	82 2f       	mov	r24, r18
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	fc 01       	movw	r30, r24
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	e8 0f       	add	r30, r24
    14fc:	f9 1f       	adc	r31, r25
    14fe:	e4 59       	subi	r30, 0x94	; 148
    1500:	fd 4f       	sbci	r31, 0xFD	; 253
    1502:	30 81       	ld	r19, Z
    1504:	33 23       	and	r19, r19
    1506:	79 f3       	breq	.-34     	; 0x14e6 <vTaskSwitchContext+0x7a>
    1508:	ac 01       	movw	r20, r24
    150a:	44 0f       	add	r20, r20
    150c:	55 1f       	adc	r21, r21
    150e:	44 0f       	add	r20, r20
    1510:	55 1f       	adc	r21, r21
    1512:	44 0f       	add	r20, r20
    1514:	55 1f       	adc	r21, r21
    1516:	48 0f       	add	r20, r24
    1518:	59 1f       	adc	r21, r25
    151a:	da 01       	movw	r26, r20
    151c:	a4 59       	subi	r26, 0x94	; 148
    151e:	bd 4f       	sbci	r27, 0xFD	; 253
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	ed 91       	ld	r30, X+
    1524:	fc 91       	ld	r31, X
    1526:	12 97       	sbiw	r26, 0x02	; 2
    1528:	02 80       	ldd	r0, Z+2	; 0x02
    152a:	f3 81       	ldd	r31, Z+3	; 0x03
    152c:	e0 2d       	mov	r30, r0
    152e:	12 96       	adiw	r26, 0x02	; 2
    1530:	fc 93       	st	X, r31
    1532:	ee 93       	st	-X, r30
    1534:	11 97       	sbiw	r26, 0x01	; 1
    1536:	41 59       	subi	r20, 0x91	; 145
    1538:	5d 4f       	sbci	r21, 0xFD	; 253
    153a:	e4 17       	cp	r30, r20
    153c:	f5 07       	cpc	r31, r21
    153e:	29 f4       	brne	.+10     	; 0x154a <vTaskSwitchContext+0xde>
    1540:	42 81       	ldd	r20, Z+2	; 0x02
    1542:	53 81       	ldd	r21, Z+3	; 0x03
    1544:	fd 01       	movw	r30, r26
    1546:	52 83       	std	Z+2, r21	; 0x02
    1548:	41 83       	std	Z+1, r20	; 0x01
    154a:	fc 01       	movw	r30, r24
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	8e 0f       	add	r24, r30
    155a:	9f 1f       	adc	r25, r31
    155c:	fc 01       	movw	r30, r24
    155e:	e4 59       	subi	r30, 0x94	; 148
    1560:	fd 4f       	sbci	r31, 0xFD	; 253
    1562:	01 80       	ldd	r0, Z+1	; 0x01
    1564:	f2 81       	ldd	r31, Z+2	; 0x02
    1566:	e0 2d       	mov	r30, r0
    1568:	86 81       	ldd	r24, Z+6	; 0x06
    156a:	97 81       	ldd	r25, Z+7	; 0x07
    156c:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <pxCurrentTCB+0x1>
    1570:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <pxCurrentTCB>
    1574:	20 93 36 02 	sts	0x0236, r18	; 0x800236 <uxTopReadyPriority>
    1578:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    157c:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    1580:	85 a1       	ldd	r24, Z+37	; 0x25
    1582:	0c 94 38 02 	jmp	0x470	; 0x470 <task_switch_in>
    1586:	08 95       	ret

00001588 <vTaskPlaceOnEventList>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	eb 01       	movw	r28, r22
    158e:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <pxCurrentTCB>
    1592:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    1596:	64 5f       	subi	r22, 0xF4	; 244
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	0e 94 99 02 	call	0x532	; 0x532 <vListInsert>
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	ce 01       	movw	r24, r28
    15a2:	73 dc       	rcall	.-1818   	; 0xe8a <prvAddCurrentTaskToDelayedList>
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <vTaskPlaceOnEventListRestricted>:
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	8b 01       	movw	r16, r22
    15b2:	c4 2f       	mov	r28, r20
    15b4:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <pxCurrentTCB>
    15b8:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    15bc:	64 5f       	subi	r22, 0xF4	; 244
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <vListInsertEnd>
    15c4:	cc 23       	and	r28, r28
    15c6:	11 f0       	breq	.+4      	; 0x15cc <vTaskPlaceOnEventListRestricted+0x22>
    15c8:	0f ef       	ldi	r16, 0xFF	; 255
    15ca:	1f ef       	ldi	r17, 0xFF	; 255
    15cc:	6c 2f       	mov	r22, r28
    15ce:	c8 01       	movw	r24, r16
    15d0:	5c dc       	rcall	.-1864   	; 0xe8a <prvAddCurrentTaskToDelayedList>
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <xTaskRemoveFromEventList>:
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	dc 01       	movw	r26, r24
    15e4:	15 96       	adiw	r26, 0x05	; 5
    15e6:	ed 91       	ld	r30, X+
    15e8:	fc 91       	ld	r31, X
    15ea:	16 97       	sbiw	r26, 0x06	; 6
    15ec:	c6 81       	ldd	r28, Z+6	; 0x06
    15ee:	d7 81       	ldd	r29, Z+7	; 0x07
    15f0:	8e 01       	movw	r16, r28
    15f2:	04 5f       	subi	r16, 0xF4	; 244
    15f4:	1f 4f       	sbci	r17, 0xFF	; 255
    15f6:	c8 01       	movw	r24, r16
    15f8:	0e 94 ca 02 	call	0x594	; 0x594 <uxListRemove>
    15fc:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    1600:	81 11       	cpse	r24, r1
    1602:	1c c0       	rjmp	.+56     	; 0x163c <xTaskRemoveFromEventList+0x62>
    1604:	0a 50       	subi	r16, 0x0A	; 10
    1606:	11 09       	sbc	r17, r1
    1608:	c8 01       	movw	r24, r16
    160a:	0e 94 ca 02 	call	0x594	; 0x594 <uxListRemove>
    160e:	8e 89       	ldd	r24, Y+22	; 0x16
    1610:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <uxTopReadyPriority>
    1614:	98 17       	cp	r25, r24
    1616:	10 f4       	brcc	.+4      	; 0x161c <xTaskRemoveFromEventList+0x42>
    1618:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <uxTopReadyPriority>
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9c 01       	movw	r18, r24
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	82 0f       	add	r24, r18
    162e:	93 1f       	adc	r25, r19
    1630:	b8 01       	movw	r22, r16
    1632:	84 59       	subi	r24, 0x94	; 148
    1634:	9d 4f       	sbci	r25, 0xFD	; 253
    1636:	0e 94 78 02 	call	0x4f0	; 0x4f0 <vListInsertEnd>
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <xTaskRemoveFromEventList+0x6c>
    163c:	b8 01       	movw	r22, r16
    163e:	8d e4       	ldi	r24, 0x4D	; 77
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	0e 94 78 02 	call	0x4f0	; 0x4f0 <vListInsertEnd>
    1646:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <pxCurrentTCB>
    164a:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <pxCurrentTCB+0x1>
    164e:	9e 89       	ldd	r25, Y+22	; 0x16
    1650:	86 89       	ldd	r24, Z+22	; 0x16
    1652:	89 17       	cp	r24, r25
    1654:	20 f4       	brcc	.+8      	; 0x165e <xTaskRemoveFromEventList+0x84>
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <xYieldPending>
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <xTaskRemoveFromEventList+0x86>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <vTaskInternalSetTimeOutState>:
    166a:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <xNumOfOverflows>
    166e:	fc 01       	movw	r30, r24
    1670:	20 83       	st	Z, r18
    1672:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <xTickCount>
    1676:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <xTickCount+0x1>
    167a:	32 83       	std	Z+2, r19	; 0x02
    167c:	21 83       	std	Z+1, r18	; 0x01
    167e:	08 95       	ret

00001680 <xTaskCheckForTimeOut>:
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	0f 92       	push	r0
    168a:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <xTickCount>
    168e:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <xTickCount+0x1>
    1692:	db 01       	movw	r26, r22
    1694:	4d 91       	ld	r20, X+
    1696:	5c 91       	ld	r21, X
    1698:	4f 3f       	cpi	r20, 0xFF	; 255
    169a:	bf ef       	ldi	r27, 0xFF	; 255
    169c:	5b 07       	cpc	r21, r27
    169e:	e9 f0       	breq	.+58     	; 0x16da <xTaskCheckForTimeOut+0x5a>
    16a0:	ec 01       	movw	r28, r24
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <xNumOfOverflows>
    16aa:	b8 81       	ld	r27, Y
    16ac:	ba 17       	cp	r27, r26
    16ae:	19 f0       	breq	.+6      	; 0x16b6 <xTaskCheckForTimeOut+0x36>
    16b0:	2e 17       	cp	r18, r30
    16b2:	3f 07       	cpc	r19, r31
    16b4:	a0 f4       	brcc	.+40     	; 0x16de <xTaskCheckForTimeOut+0x5e>
    16b6:	2e 1b       	sub	r18, r30
    16b8:	3f 0b       	sbc	r19, r31
    16ba:	24 17       	cp	r18, r20
    16bc:	35 07       	cpc	r19, r21
    16be:	40 f4       	brcc	.+16     	; 0x16d0 <xTaskCheckForTimeOut+0x50>
    16c0:	fb 01       	movw	r30, r22
    16c2:	42 1b       	sub	r20, r18
    16c4:	53 0b       	sbc	r21, r19
    16c6:	51 83       	std	Z+1, r21	; 0x01
    16c8:	40 83       	st	Z, r20
    16ca:	cf df       	rcall	.-98     	; 0x166a <vTaskInternalSetTimeOutState>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <xTaskCheckForTimeOut+0x60>
    16d0:	fb 01       	movw	r30, r22
    16d2:	11 82       	std	Z+1, r1	; 0x01
    16d4:	10 82       	st	Z, r1
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <xTaskCheckForTimeOut+0x60>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <xTaskCheckForTimeOut+0x60>
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <vTaskMissedYield>:
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <xYieldPending>
    16f0:	08 95       	ret

000016f2 <xTaskGetSchedulerState>:
    16f2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <xSchedulerRunning>
    16f6:	88 23       	and	r24, r24
    16f8:	31 f0       	breq	.+12     	; 0x1706 <xTaskGetSchedulerState+0x14>
    16fa:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
    16fe:	88 23       	and	r24, r24
    1700:	21 f0       	breq	.+8      	; 0x170a <xTaskGetSchedulerState+0x18>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	08 95       	ret
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	08 95       	ret
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	08 95       	ret

0000170e <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1718:	89 2b       	or	r24, r25
    171a:	79 f1       	breq	.+94     	; 0x177a <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    171c:	84 a1       	ldd	r24, Z+36	; 0x24
    171e:	81 50       	subi	r24, 0x01	; 1
    1720:	84 a3       	std	Z+36, r24	; 0x24

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1722:	26 89       	ldd	r18, Z+22	; 0x16
    1724:	93 a1       	ldd	r25, Z+35	; 0x23
    1726:	29 17       	cp	r18, r25
    1728:	51 f1       	breq	.+84     	; 0x177e <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    172a:	81 11       	cpse	r24, r1
    172c:	2a c0       	rjmp	.+84     	; 0x1782 <xTaskPriorityDisinherit+0x74>
    172e:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1730:	8f 01       	movw	r16, r30
    1732:	0e 5f       	subi	r16, 0xFE	; 254
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	c8 01       	movw	r24, r16
    1738:	0e 94 ca 02 	call	0x594	; 0x594 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    173c:	8b a1       	ldd	r24, Y+35	; 0x23
    173e:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1740:	24 e0       	ldi	r18, 0x04	; 4
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	28 1b       	sub	r18, r24
    1746:	31 09       	sbc	r19, r1
    1748:	3d 87       	std	Y+13, r19	; 0x0d
    174a:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    174c:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <uxTopReadyPriority>
    1750:	98 17       	cp	r25, r24
    1752:	10 f4       	brcc	.+4      	; 0x1758 <xTaskPriorityDisinherit+0x4a>
    1754:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <uxTopReadyPriority>
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9c 01       	movw	r18, r24
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	22 0f       	add	r18, r18
    1766:	33 1f       	adc	r19, r19
    1768:	82 0f       	add	r24, r18
    176a:	93 1f       	adc	r25, r19
    176c:	b8 01       	movw	r22, r16
    176e:	84 59       	subi	r24, 0x94	; 148
    1770:	9d 4f       	sbci	r25, 0xFD	; 253
    1772:	0e 94 78 02 	call	0x4f0	; 0x4f0 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <xTaskPriorityDisinherit+0x76>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <xTaskPriorityDisinherit+0x76>
    1782:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	08 95       	ret

0000178e <prvInsertTimerInActiveList>:
    178e:	fc 01       	movw	r30, r24
    1790:	73 83       	std	Z+3, r23	; 0x03
    1792:	62 83       	std	Z+2, r22	; 0x02
    1794:	91 87       	std	Z+9, r25	; 0x09
    1796:	80 87       	std	Z+8, r24	; 0x08
    1798:	46 17       	cp	r20, r22
    179a:	57 07       	cpc	r21, r23
    179c:	90 f0       	brcs	.+36     	; 0x17c2 <prvInsertTimerInActiveList+0x34>
    179e:	42 1b       	sub	r20, r18
    17a0:	53 0b       	sbc	r21, r19
    17a2:	84 85       	ldd	r24, Z+12	; 0x0c
    17a4:	95 85       	ldd	r25, Z+13	; 0x0d
    17a6:	48 17       	cp	r20, r24
    17a8:	59 07       	cpc	r21, r25
    17aa:	e0 f4       	brcc	.+56     	; 0x17e4 <prvInsertTimerInActiveList+0x56>
    17ac:	bf 01       	movw	r22, r30
    17ae:	6e 5f       	subi	r22, 0xFE	; 254
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <pxOverflowTimerList>
    17b6:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <pxOverflowTimerList+0x1>
    17ba:	0e 94 99 02 	call	0x532	; 0x532 <vListInsert>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
    17c2:	42 17       	cp	r20, r18
    17c4:	53 07       	cpc	r21, r19
    17c6:	18 f4       	brcc	.+6      	; 0x17ce <prvInsertTimerInActiveList+0x40>
    17c8:	62 17       	cp	r22, r18
    17ca:	73 07       	cpc	r23, r19
    17cc:	68 f4       	brcc	.+26     	; 0x17e8 <prvInsertTimerInActiveList+0x5a>
    17ce:	bf 01       	movw	r22, r30
    17d0:	6e 5f       	subi	r22, 0xFE	; 254
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <pxCurrentTimerList>
    17d8:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <pxCurrentTimerList+0x1>
    17dc:	0e 94 99 02 	call	0x532	; 0x532 <vListInsert>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 95       	ret
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	08 95       	ret
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	08 95       	ret

000017ec <prvCheckForValidListAndQueue>:
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	0f 92       	push	r0
    17f2:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <xTimerQueue>
    17f6:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <xTimerQueue+0x1>
    17fa:	89 2b       	or	r24, r25
    17fc:	e1 f4       	brne	.+56     	; 0x1836 <prvCheckForValidListAndQueue+0x4a>
    17fe:	85 ea       	ldi	r24, 0xA5	; 165
    1800:	92 e0       	ldi	r25, 0x02	; 2
    1802:	0e 94 66 02 	call	0x4cc	; 0x4cc <vListInitialise>
    1806:	8c e9       	ldi	r24, 0x9C	; 156
    1808:	92 e0       	ldi	r25, 0x02	; 2
    180a:	0e 94 66 02 	call	0x4cc	; 0x4cc <vListInitialise>
    180e:	85 ea       	ldi	r24, 0xA5	; 165
    1810:	92 e0       	ldi	r25, 0x02	; 2
    1812:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <pxCurrentTimerList+0x1>
    1816:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <pxCurrentTimerList>
    181a:	8c e9       	ldi	r24, 0x9C	; 156
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <pxOverflowTimerList+0x1>
    1822:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <pxOverflowTimerList>
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	65 e0       	ldi	r22, 0x05	; 5
    182a:	8a e0       	ldi	r24, 0x0A	; 10
    182c:	5b d9       	rcall	.-3402   	; 0xae4 <xQueueGenericCreate>
    182e:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <xTimerQueue+0x1>
    1832:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <xTimerQueue>
    1836:	0f 90       	pop	r0
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	08 95       	ret

0000183c <xTimerCreateTimerTask>:
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	d4 df       	rcall	.-88     	; 0x17ec <prvCheckForValidListAndQueue>
    1844:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <xTimerQueue>
    1848:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <xTimerQueue+0x1>
    184c:	89 2b       	or	r24, r25
    184e:	89 f0       	breq	.+34     	; 0x1872 <xTimerCreateTimerTask+0x36>
    1850:	0f 2e       	mov	r0, r31
    1852:	f4 e9       	ldi	r31, 0x94	; 148
    1854:	ef 2e       	mov	r14, r31
    1856:	f2 e0       	ldi	r31, 0x02	; 2
    1858:	ff 2e       	mov	r15, r31
    185a:	f0 2d       	mov	r31, r0
    185c:	03 e0       	ldi	r16, 0x03	; 3
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	45 e5       	ldi	r20, 0x55	; 85
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	63 e2       	ldi	r22, 0x23	; 35
    1868:	72 e0       	ldi	r23, 0x02	; 2
    186a:	82 eb       	ldi	r24, 0xB2	; 178
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	61 db       	rcall	.-2366   	; 0xf32 <xTaskCreate>
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <xTimerCreateTimerTask+0x38>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	08 95       	ret

0000187c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	00 d0       	rcall	.+0      	; 0x1886 <xTimerGenericCommand+0xa>
    1886:	1f 92       	push	r1
    1888:	1f 92       	push	r1
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    188e:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <xTimerQueue>
    1892:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <xTimerQueue+0x1>
    1896:	30 97       	sbiw	r30, 0x00	; 0
    1898:	51 f1       	breq	.+84     	; 0x18ee <xTimerGenericCommand+0x72>
    189a:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    189c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    189e:	5b 83       	std	Y+3, r21	; 0x03
    18a0:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    18a2:	9d 83       	std	Y+5, r25	; 0x05
    18a4:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    18a6:	66 30       	cpi	r22, 0x06	; 6
    18a8:	d4 f4       	brge	.+52     	; 0x18de <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    18aa:	23 df       	rcall	.-442    	; 0x16f2 <xTaskGetSchedulerState>
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	59 f4       	brne	.+22     	; 0x18c6 <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	a8 01       	movw	r20, r16
    18b4:	be 01       	movw	r22, r28
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <xTimerQueue>
    18be:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <xTimerQueue+0x1>
    18c2:	3e d9       	rcall	.-3460   	; 0xb40 <xQueueGenericSend>
    18c4:	15 c0       	rjmp	.+42     	; 0x18f0 <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	be 01       	movw	r22, r28
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <xTimerQueue>
    18d6:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <xTimerQueue+0x1>
    18da:	32 d9       	rcall	.-3484   	; 0xb40 <xQueueGenericSend>
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	ad 01       	movw	r20, r26
    18e2:	be 01       	movw	r22, r28
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	cf 01       	movw	r24, r30
    18ea:	d4 d9       	rcall	.-3160   	; 0xc94 <xQueueGenericSendFromISR>
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    191a:	4f dc       	rcall	.-1890   	; 0x11ba <xTaskGetTickCount>
    191c:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    191e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <xLastTime.2432>
    1922:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <xLastTime.2432+0x1>
    1926:	e8 16       	cp	r14, r24
    1928:	f9 06       	cpc	r15, r25
    192a:	08 f0       	brcs	.+2      	; 0x192e <prvSampleTimeNow+0x2a>
    192c:	47 c0       	rjmp	.+142    	; 0x19bc <prvSampleTimeNow+0xb8>
    192e:	2f c0       	rjmp	.+94     	; 0x198e <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1930:	05 80       	ldd	r0, Z+5	; 0x05
    1932:	f6 81       	ldd	r31, Z+6	; 0x06
    1934:	e0 2d       	mov	r30, r0
    1936:	a0 80       	ld	r10, Z
    1938:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    193a:	c6 81       	ldd	r28, Z+6	; 0x06
    193c:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    193e:	8e 01       	movw	r16, r28
    1940:	0e 5f       	subi	r16, 0xFE	; 254
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	c8 01       	movw	r24, r16
    1946:	0e 94 ca 02 	call	0x594	; 0x594 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    194a:	e8 89       	ldd	r30, Y+16	; 0x10
    194c:	f9 89       	ldd	r31, Y+17	; 0x11
    194e:	ce 01       	movw	r24, r28
    1950:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1952:	8b 89       	ldd	r24, Y+19	; 0x13
    1954:	82 ff       	sbrs	r24, 2
    1956:	1b c0       	rjmp	.+54     	; 0x198e <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1958:	8c 85       	ldd	r24, Y+12	; 0x0c
    195a:	9d 85       	ldd	r25, Y+13	; 0x0d
    195c:	8a 0d       	add	r24, r10
    195e:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    1960:	a8 16       	cp	r10, r24
    1962:	b9 06       	cpc	r11, r25
    1964:	60 f4       	brcc	.+24     	; 0x197e <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    196a:	d9 87       	std	Y+9, r29	; 0x09
    196c:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    196e:	b8 01       	movw	r22, r16
    1970:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <pxCurrentTimerList>
    1974:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <pxCurrentTimerList+0x1>
    1978:	0e 94 99 02 	call	0x532	; 0x532 <vListInsert>
    197c:	08 c0       	rjmp	.+16     	; 0x198e <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    197e:	00 e0       	ldi	r16, 0x00	; 0
    1980:	10 e0       	ldi	r17, 0x00	; 0
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	a5 01       	movw	r20, r10
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	ce 01       	movw	r24, r28
    198c:	77 df       	rcall	.-274    	; 0x187c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    198e:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <pxCurrentTimerList>
    1992:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <pxCurrentTimerList+0x1>
    1996:	80 81       	ld	r24, Z
    1998:	81 11       	cpse	r24, r1
    199a:	ca cf       	rjmp	.-108    	; 0x1930 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    199c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <pxOverflowTimerList>
    19a0:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <pxOverflowTimerList+0x1>
    19a4:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <pxCurrentTimerList+0x1>
    19a8:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    19ac:	f0 93 99 02 	sts	0x0299, r31	; 0x800299 <pxOverflowTimerList+0x1>
    19b0:	e0 93 98 02 	sts	0x0298, r30	; 0x800298 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	f6 01       	movw	r30, r12
    19b8:	80 83       	st	Z, r24
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    19bc:	f6 01       	movw	r30, r12
    19be:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    19c0:	f0 92 93 02 	sts	0x0293, r15	; 0x800293 <xLastTime.2432+0x1>
    19c4:	e0 92 92 02 	sts	0x0292, r14	; 0x800292 <xLastTime.2432>

    return xTimeNow;
}
    19c8:	c7 01       	movw	r24, r14
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	08 95       	ret

000019e0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    19e0:	08 95       	ret

000019e2 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    19e2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    19e4:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19e6:	2f ef       	ldi	r18, 0xFF	; 255
    19e8:	80 e7       	ldi	r24, 0x70	; 112
    19ea:	92 e0       	ldi	r25, 0x02	; 2
    19ec:	21 50       	subi	r18, 0x01	; 1
    19ee:	80 40       	sbci	r24, 0x00	; 0
    19f0:	90 40       	sbci	r25, 0x00	; 0
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <vApplicationMallocFailedHook+0xa>
    19f4:	00 c0       	rjmp	.+0      	; 0x19f6 <vApplicationMallocFailedHook+0x14>
    19f6:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    19f8:	1f 9a       	sbi	0x03, 7	; 3
    19fa:	f5 cf       	rjmp	.-22     	; 0x19e6 <vApplicationMallocFailedHook+0x4>

000019fc <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    19fc:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    19fe:	2f 9a       	sbi	0x05, 7	; 5
    1a00:	2f ef       	ldi	r18, 0xFF	; 255
    1a02:	87 ea       	ldi	r24, 0xA7	; 167
    1a04:	91 e6       	ldi	r25, 0x61	; 97
    1a06:	21 50       	subi	r18, 0x01	; 1
    1a08:	80 40       	sbci	r24, 0x00	; 0
    1a0a:	90 40       	sbci	r25, 0x00	; 0
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <vApplicationStackOverflowHook+0xa>
    1a0e:	00 c0       	rjmp	.+0      	; 0x1a10 <vApplicationStackOverflowHook+0x14>
    1a10:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1a12:	1f 9a       	sbi	0x03, 7	; 3
    1a14:	f5 cf       	rjmp	.-22     	; 0x1a00 <vApplicationStackOverflowHook+0x4>

00001a16 <__tablejump2__>:
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	8b bf       	out	0x3b, r24	; 59
    1a1e:	07 90       	elpm	r0, Z+
    1a20:	f6 91       	elpm	r31, Z
    1a22:	e0 2d       	mov	r30, r0
    1a24:	19 94       	eijmp

00001a26 <malloc>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	91 05       	cpc	r25, r1
    1a32:	10 f4       	brcc	.+4      	; 0x1a38 <malloc+0x12>
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <__flp>
    1a3c:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <__flp+0x1>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	a0 e0       	ldi	r26, 0x00	; 0
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	30 97       	sbiw	r30, 0x00	; 0
    1a4a:	19 f1       	breq	.+70     	; 0x1a92 <malloc+0x6c>
    1a4c:	40 81       	ld	r20, Z
    1a4e:	51 81       	ldd	r21, Z+1	; 0x01
    1a50:	02 81       	ldd	r16, Z+2	; 0x02
    1a52:	13 81       	ldd	r17, Z+3	; 0x03
    1a54:	48 17       	cp	r20, r24
    1a56:	59 07       	cpc	r21, r25
    1a58:	c8 f0       	brcs	.+50     	; 0x1a8c <malloc+0x66>
    1a5a:	84 17       	cp	r24, r20
    1a5c:	95 07       	cpc	r25, r21
    1a5e:	69 f4       	brne	.+26     	; 0x1a7a <malloc+0x54>
    1a60:	10 97       	sbiw	r26, 0x00	; 0
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <malloc+0x4a>
    1a64:	12 96       	adiw	r26, 0x02	; 2
    1a66:	0c 93       	st	X, r16
    1a68:	12 97       	sbiw	r26, 0x02	; 2
    1a6a:	13 96       	adiw	r26, 0x03	; 3
    1a6c:	1c 93       	st	X, r17
    1a6e:	27 c0       	rjmp	.+78     	; 0x1abe <malloc+0x98>
    1a70:	00 93 b2 02 	sts	0x02B2, r16	; 0x8002b2 <__flp>
    1a74:	10 93 b3 02 	sts	0x02B3, r17	; 0x8002b3 <__flp+0x1>
    1a78:	22 c0       	rjmp	.+68     	; 0x1abe <malloc+0x98>
    1a7a:	21 15       	cp	r18, r1
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <malloc+0x60>
    1a80:	42 17       	cp	r20, r18
    1a82:	53 07       	cpc	r21, r19
    1a84:	18 f4       	brcc	.+6      	; 0x1a8c <malloc+0x66>
    1a86:	9a 01       	movw	r18, r20
    1a88:	bd 01       	movw	r22, r26
    1a8a:	ef 01       	movw	r28, r30
    1a8c:	df 01       	movw	r26, r30
    1a8e:	f8 01       	movw	r30, r16
    1a90:	db cf       	rjmp	.-74     	; 0x1a48 <malloc+0x22>
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	f9 f0       	breq	.+62     	; 0x1ad6 <malloc+0xb0>
    1a98:	28 1b       	sub	r18, r24
    1a9a:	39 0b       	sbc	r19, r25
    1a9c:	24 30       	cpi	r18, 0x04	; 4
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	80 f4       	brcc	.+32     	; 0x1ac2 <malloc+0x9c>
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	61 15       	cp	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <malloc+0x8e>
    1aac:	fb 01       	movw	r30, r22
    1aae:	93 83       	std	Z+3, r25	; 0x03
    1ab0:	82 83       	std	Z+2, r24	; 0x02
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <malloc+0x96>
    1ab4:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <__flp+0x1>
    1ab8:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__flp>
    1abc:	fe 01       	movw	r30, r28
    1abe:	32 96       	adiw	r30, 0x02	; 2
    1ac0:	44 c0       	rjmp	.+136    	; 0x1b4a <malloc+0x124>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e2 0f       	add	r30, r18
    1ac6:	f3 1f       	adc	r31, r19
    1ac8:	81 93       	st	Z+, r24
    1aca:	91 93       	st	Z+, r25
    1acc:	22 50       	subi	r18, 0x02	; 2
    1ace:	31 09       	sbc	r19, r1
    1ad0:	39 83       	std	Y+1, r19	; 0x01
    1ad2:	28 83       	st	Y, r18
    1ad4:	3a c0       	rjmp	.+116    	; 0x1b4a <malloc+0x124>
    1ad6:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__brkval>
    1ada:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__brkval+0x1>
    1ade:	23 2b       	or	r18, r19
    1ae0:	41 f4       	brne	.+16     	; 0x1af2 <malloc+0xcc>
    1ae2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1ae6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1aea:	30 93 b1 02 	sts	0x02B1, r19	; 0x8002b1 <__brkval+0x1>
    1aee:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <__brkval>
    1af2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1af6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1afa:	21 15       	cp	r18, r1
    1afc:	31 05       	cpc	r19, r1
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <malloc+0xea>
    1b00:	2d b7       	in	r18, 0x3d	; 61
    1b02:	3e b7       	in	r19, 0x3e	; 62
    1b04:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1b08:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1b0c:	24 1b       	sub	r18, r20
    1b0e:	35 0b       	sbc	r19, r21
    1b10:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <__brkval>
    1b14:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <__brkval+0x1>
    1b18:	e2 17       	cp	r30, r18
    1b1a:	f3 07       	cpc	r31, r19
    1b1c:	a0 f4       	brcc	.+40     	; 0x1b46 <malloc+0x120>
    1b1e:	2e 1b       	sub	r18, r30
    1b20:	3f 0b       	sbc	r19, r31
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	78 f0       	brcs	.+30     	; 0x1b46 <malloc+0x120>
    1b28:	ac 01       	movw	r20, r24
    1b2a:	4e 5f       	subi	r20, 0xFE	; 254
    1b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2e:	24 17       	cp	r18, r20
    1b30:	35 07       	cpc	r19, r21
    1b32:	48 f0       	brcs	.+18     	; 0x1b46 <malloc+0x120>
    1b34:	4e 0f       	add	r20, r30
    1b36:	5f 1f       	adc	r21, r31
    1b38:	50 93 b1 02 	sts	0x02B1, r21	; 0x8002b1 <__brkval+0x1>
    1b3c:	40 93 b0 02 	sts	0x02B0, r20	; 0x8002b0 <__brkval>
    1b40:	81 93       	st	Z+, r24
    1b42:	91 93       	st	Z+, r25
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <malloc+0x124>
    1b46:	e0 e0       	ldi	r30, 0x00	; 0
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <free>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <free+0xa>
    1b5e:	81 c0       	rjmp	.+258    	; 0x1c62 <free+0x10c>
    1b60:	fc 01       	movw	r30, r24
    1b62:	32 97       	sbiw	r30, 0x02	; 2
    1b64:	13 82       	std	Z+3, r1	; 0x03
    1b66:	12 82       	std	Z+2, r1	; 0x02
    1b68:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <__flp>
    1b6c:	b0 91 b3 02 	lds	r27, 0x02B3	; 0x8002b3 <__flp+0x1>
    1b70:	10 97       	sbiw	r26, 0x00	; 0
    1b72:	81 f4       	brne	.+32     	; 0x1b94 <free+0x3e>
    1b74:	20 81       	ld	r18, Z
    1b76:	31 81       	ldd	r19, Z+1	; 0x01
    1b78:	82 0f       	add	r24, r18
    1b7a:	93 1f       	adc	r25, r19
    1b7c:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__brkval>
    1b80:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__brkval+0x1>
    1b84:	28 17       	cp	r18, r24
    1b86:	39 07       	cpc	r19, r25
    1b88:	51 f5       	brne	.+84     	; 0x1bde <free+0x88>
    1b8a:	f0 93 b1 02 	sts	0x02B1, r31	; 0x8002b1 <__brkval+0x1>
    1b8e:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <__brkval>
    1b92:	67 c0       	rjmp	.+206    	; 0x1c62 <free+0x10c>
    1b94:	ed 01       	movw	r28, r26
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	ce 17       	cp	r28, r30
    1b9c:	df 07       	cpc	r29, r31
    1b9e:	40 f4       	brcc	.+16     	; 0x1bb0 <free+0x5a>
    1ba0:	4a 81       	ldd	r20, Y+2	; 0x02
    1ba2:	5b 81       	ldd	r21, Y+3	; 0x03
    1ba4:	9e 01       	movw	r18, r28
    1ba6:	41 15       	cp	r20, r1
    1ba8:	51 05       	cpc	r21, r1
    1baa:	f1 f0       	breq	.+60     	; 0x1be8 <free+0x92>
    1bac:	ea 01       	movw	r28, r20
    1bae:	f5 cf       	rjmp	.-22     	; 0x1b9a <free+0x44>
    1bb0:	d3 83       	std	Z+3, r29	; 0x03
    1bb2:	c2 83       	std	Z+2, r28	; 0x02
    1bb4:	40 81       	ld	r20, Z
    1bb6:	51 81       	ldd	r21, Z+1	; 0x01
    1bb8:	84 0f       	add	r24, r20
    1bba:	95 1f       	adc	r25, r21
    1bbc:	c8 17       	cp	r28, r24
    1bbe:	d9 07       	cpc	r29, r25
    1bc0:	59 f4       	brne	.+22     	; 0x1bd8 <free+0x82>
    1bc2:	88 81       	ld	r24, Y
    1bc4:	99 81       	ldd	r25, Y+1	; 0x01
    1bc6:	84 0f       	add	r24, r20
    1bc8:	95 1f       	adc	r25, r21
    1bca:	02 96       	adiw	r24, 0x02	; 2
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd4:	93 83       	std	Z+3, r25	; 0x03
    1bd6:	82 83       	std	Z+2, r24	; 0x02
    1bd8:	21 15       	cp	r18, r1
    1bda:	31 05       	cpc	r19, r1
    1bdc:	29 f4       	brne	.+10     	; 0x1be8 <free+0x92>
    1bde:	f0 93 b3 02 	sts	0x02B3, r31	; 0x8002b3 <__flp+0x1>
    1be2:	e0 93 b2 02 	sts	0x02B2, r30	; 0x8002b2 <__flp>
    1be6:	3d c0       	rjmp	.+122    	; 0x1c62 <free+0x10c>
    1be8:	e9 01       	movw	r28, r18
    1bea:	fb 83       	std	Y+3, r31	; 0x03
    1bec:	ea 83       	std	Y+2, r30	; 0x02
    1bee:	49 91       	ld	r20, Y+
    1bf0:	59 91       	ld	r21, Y+
    1bf2:	c4 0f       	add	r28, r20
    1bf4:	d5 1f       	adc	r29, r21
    1bf6:	ec 17       	cp	r30, r28
    1bf8:	fd 07       	cpc	r31, r29
    1bfa:	61 f4       	brne	.+24     	; 0x1c14 <free+0xbe>
    1bfc:	80 81       	ld	r24, Z
    1bfe:	91 81       	ldd	r25, Z+1	; 0x01
    1c00:	84 0f       	add	r24, r20
    1c02:	95 1f       	adc	r25, r21
    1c04:	02 96       	adiw	r24, 0x02	; 2
    1c06:	e9 01       	movw	r28, r18
    1c08:	99 83       	std	Y+1, r25	; 0x01
    1c0a:	88 83       	st	Y, r24
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	9b 83       	std	Y+3, r25	; 0x03
    1c12:	8a 83       	std	Y+2, r24	; 0x02
    1c14:	e0 e0       	ldi	r30, 0x00	; 0
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	12 96       	adiw	r26, 0x02	; 2
    1c1a:	8d 91       	ld	r24, X+
    1c1c:	9c 91       	ld	r25, X
    1c1e:	13 97       	sbiw	r26, 0x03	; 3
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <free+0xd4>
    1c24:	fd 01       	movw	r30, r26
    1c26:	dc 01       	movw	r26, r24
    1c28:	f7 cf       	rjmp	.-18     	; 0x1c18 <free+0xc2>
    1c2a:	8d 91       	ld	r24, X+
    1c2c:	9c 91       	ld	r25, X
    1c2e:	11 97       	sbiw	r26, 0x01	; 1
    1c30:	9d 01       	movw	r18, r26
    1c32:	2e 5f       	subi	r18, 0xFE	; 254
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__brkval>
    1c3e:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__brkval+0x1>
    1c42:	28 17       	cp	r18, r24
    1c44:	39 07       	cpc	r19, r25
    1c46:	69 f4       	brne	.+26     	; 0x1c62 <free+0x10c>
    1c48:	30 97       	sbiw	r30, 0x00	; 0
    1c4a:	29 f4       	brne	.+10     	; 0x1c56 <free+0x100>
    1c4c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <__flp+0x1>
    1c50:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__flp>
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <free+0x104>
    1c56:	13 82       	std	Z+3, r1	; 0x03
    1c58:	12 82       	std	Z+2, r1	; 0x02
    1c5a:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <__brkval+0x1>
    1c5e:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <__brkval>
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <memcpy>:
    1c68:	fb 01       	movw	r30, r22
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <memcpy+0xa>
    1c6e:	01 90       	ld	r0, Z+
    1c70:	0d 92       	st	X+, r0
    1c72:	41 50       	subi	r20, 0x01	; 1
    1c74:	50 40       	sbci	r21, 0x00	; 0
    1c76:	d8 f7       	brcc	.-10     	; 0x1c6e <memcpy+0x6>
    1c78:	08 95       	ret

00001c7a <memset>:
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <memset+0x6>
    1c7e:	6d 93       	st	X+, r22
    1c80:	41 50       	subi	r20, 0x01	; 1
    1c82:	50 40       	sbci	r21, 0x00	; 0
    1c84:	e0 f7       	brcc	.-8      	; 0x1c7e <memset+0x4>
    1c86:	08 95       	ret

00001c88 <printf>:
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	ae 01       	movw	r20, r28
    1c92:	4a 5f       	subi	r20, 0xFA	; 250
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	fa 01       	movw	r30, r20
    1c98:	61 91       	ld	r22, Z+
    1c9a:	71 91       	ld	r23, Z+
    1c9c:	af 01       	movw	r20, r30
    1c9e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__iob+0x2>
    1ca2:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <__iob+0x3>
    1ca6:	03 d0       	rcall	.+6      	; 0x1cae <vfprintf>
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <vfprintf>:
    1cae:	2f 92       	push	r2
    1cb0:	3f 92       	push	r3
    1cb2:	4f 92       	push	r4
    1cb4:	5f 92       	push	r5
    1cb6:	6f 92       	push	r6
    1cb8:	7f 92       	push	r7
    1cba:	8f 92       	push	r8
    1cbc:	9f 92       	push	r9
    1cbe:	af 92       	push	r10
    1cc0:	bf 92       	push	r11
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	2b 97       	sbiw	r28, 0x0b	; 11
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	6c 01       	movw	r12, r24
    1ce4:	7b 01       	movw	r14, r22
    1ce6:	8a 01       	movw	r16, r20
    1ce8:	fc 01       	movw	r30, r24
    1cea:	17 82       	std	Z+7, r1	; 0x07
    1cec:	16 82       	std	Z+6, r1	; 0x06
    1cee:	83 81       	ldd	r24, Z+3	; 0x03
    1cf0:	81 ff       	sbrs	r24, 1
    1cf2:	bf c1       	rjmp	.+894    	; 0x2072 <vfprintf+0x3c4>
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	3c 01       	movw	r6, r24
    1cfa:	f6 01       	movw	r30, r12
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	f7 01       	movw	r30, r14
    1d00:	93 fd       	sbrc	r25, 3
    1d02:	85 91       	lpm	r24, Z+
    1d04:	93 ff       	sbrs	r25, 3
    1d06:	81 91       	ld	r24, Z+
    1d08:	7f 01       	movw	r14, r30
    1d0a:	88 23       	and	r24, r24
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <vfprintf+0x62>
    1d0e:	ad c1       	rjmp	.+858    	; 0x206a <vfprintf+0x3bc>
    1d10:	85 32       	cpi	r24, 0x25	; 37
    1d12:	39 f4       	brne	.+14     	; 0x1d22 <vfprintf+0x74>
    1d14:	93 fd       	sbrc	r25, 3
    1d16:	85 91       	lpm	r24, Z+
    1d18:	93 ff       	sbrs	r25, 3
    1d1a:	81 91       	ld	r24, Z+
    1d1c:	7f 01       	movw	r14, r30
    1d1e:	85 32       	cpi	r24, 0x25	; 37
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <vfprintf+0x7c>
    1d22:	b6 01       	movw	r22, r12
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	d6 d1       	rcall	.+940    	; 0x20d4 <fputc>
    1d28:	e8 cf       	rjmp	.-48     	; 0x1cfa <vfprintf+0x4c>
    1d2a:	91 2c       	mov	r9, r1
    1d2c:	21 2c       	mov	r2, r1
    1d2e:	31 2c       	mov	r3, r1
    1d30:	ff e1       	ldi	r31, 0x1F	; 31
    1d32:	f3 15       	cp	r31, r3
    1d34:	d8 f0       	brcs	.+54     	; 0x1d6c <vfprintf+0xbe>
    1d36:	8b 32       	cpi	r24, 0x2B	; 43
    1d38:	79 f0       	breq	.+30     	; 0x1d58 <vfprintf+0xaa>
    1d3a:	38 f4       	brcc	.+14     	; 0x1d4a <vfprintf+0x9c>
    1d3c:	80 32       	cpi	r24, 0x20	; 32
    1d3e:	79 f0       	breq	.+30     	; 0x1d5e <vfprintf+0xb0>
    1d40:	83 32       	cpi	r24, 0x23	; 35
    1d42:	a1 f4       	brne	.+40     	; 0x1d6c <vfprintf+0xbe>
    1d44:	23 2d       	mov	r18, r3
    1d46:	20 61       	ori	r18, 0x10	; 16
    1d48:	1d c0       	rjmp	.+58     	; 0x1d84 <vfprintf+0xd6>
    1d4a:	8d 32       	cpi	r24, 0x2D	; 45
    1d4c:	61 f0       	breq	.+24     	; 0x1d66 <vfprintf+0xb8>
    1d4e:	80 33       	cpi	r24, 0x30	; 48
    1d50:	69 f4       	brne	.+26     	; 0x1d6c <vfprintf+0xbe>
    1d52:	23 2d       	mov	r18, r3
    1d54:	21 60       	ori	r18, 0x01	; 1
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <vfprintf+0xd6>
    1d58:	83 2d       	mov	r24, r3
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	38 2e       	mov	r3, r24
    1d5e:	e3 2d       	mov	r30, r3
    1d60:	e4 60       	ori	r30, 0x04	; 4
    1d62:	3e 2e       	mov	r3, r30
    1d64:	2a c0       	rjmp	.+84     	; 0x1dba <vfprintf+0x10c>
    1d66:	f3 2d       	mov	r31, r3
    1d68:	f8 60       	ori	r31, 0x08	; 8
    1d6a:	1d c0       	rjmp	.+58     	; 0x1da6 <vfprintf+0xf8>
    1d6c:	37 fc       	sbrc	r3, 7
    1d6e:	2d c0       	rjmp	.+90     	; 0x1dca <vfprintf+0x11c>
    1d70:	20 ed       	ldi	r18, 0xD0	; 208
    1d72:	28 0f       	add	r18, r24
    1d74:	2a 30       	cpi	r18, 0x0A	; 10
    1d76:	40 f0       	brcs	.+16     	; 0x1d88 <vfprintf+0xda>
    1d78:	8e 32       	cpi	r24, 0x2E	; 46
    1d7a:	b9 f4       	brne	.+46     	; 0x1daa <vfprintf+0xfc>
    1d7c:	36 fc       	sbrc	r3, 6
    1d7e:	75 c1       	rjmp	.+746    	; 0x206a <vfprintf+0x3bc>
    1d80:	23 2d       	mov	r18, r3
    1d82:	20 64       	ori	r18, 0x40	; 64
    1d84:	32 2e       	mov	r3, r18
    1d86:	19 c0       	rjmp	.+50     	; 0x1dba <vfprintf+0x10c>
    1d88:	36 fe       	sbrs	r3, 6
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <vfprintf+0xea>
    1d8c:	8a e0       	ldi	r24, 0x0A	; 10
    1d8e:	98 9e       	mul	r9, r24
    1d90:	20 0d       	add	r18, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	92 2e       	mov	r9, r18
    1d96:	11 c0       	rjmp	.+34     	; 0x1dba <vfprintf+0x10c>
    1d98:	ea e0       	ldi	r30, 0x0A	; 10
    1d9a:	2e 9e       	mul	r2, r30
    1d9c:	20 0d       	add	r18, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	22 2e       	mov	r2, r18
    1da2:	f3 2d       	mov	r31, r3
    1da4:	f0 62       	ori	r31, 0x20	; 32
    1da6:	3f 2e       	mov	r3, r31
    1da8:	08 c0       	rjmp	.+16     	; 0x1dba <vfprintf+0x10c>
    1daa:	8c 36       	cpi	r24, 0x6C	; 108
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <vfprintf+0x108>
    1dae:	83 2d       	mov	r24, r3
    1db0:	80 68       	ori	r24, 0x80	; 128
    1db2:	38 2e       	mov	r3, r24
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <vfprintf+0x10c>
    1db6:	88 36       	cpi	r24, 0x68	; 104
    1db8:	41 f4       	brne	.+16     	; 0x1dca <vfprintf+0x11c>
    1dba:	f7 01       	movw	r30, r14
    1dbc:	93 fd       	sbrc	r25, 3
    1dbe:	85 91       	lpm	r24, Z+
    1dc0:	93 ff       	sbrs	r25, 3
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	7f 01       	movw	r14, r30
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	b3 cf       	rjmp	.-154    	; 0x1d30 <vfprintf+0x82>
    1dca:	98 2f       	mov	r25, r24
    1dcc:	9f 7d       	andi	r25, 0xDF	; 223
    1dce:	95 54       	subi	r25, 0x45	; 69
    1dd0:	93 30       	cpi	r25, 0x03	; 3
    1dd2:	28 f4       	brcc	.+10     	; 0x1dde <vfprintf+0x130>
    1dd4:	0c 5f       	subi	r16, 0xFC	; 252
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	9f e3       	ldi	r25, 0x3F	; 63
    1dda:	99 83       	std	Y+1, r25	; 0x01
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <vfprintf+0x14a>
    1dde:	83 36       	cpi	r24, 0x63	; 99
    1de0:	31 f0       	breq	.+12     	; 0x1dee <vfprintf+0x140>
    1de2:	83 37       	cpi	r24, 0x73	; 115
    1de4:	71 f0       	breq	.+28     	; 0x1e02 <vfprintf+0x154>
    1de6:	83 35       	cpi	r24, 0x53	; 83
    1de8:	09 f0       	breq	.+2      	; 0x1dec <vfprintf+0x13e>
    1dea:	55 c0       	rjmp	.+170    	; 0x1e96 <vfprintf+0x1e8>
    1dec:	20 c0       	rjmp	.+64     	; 0x1e2e <vfprintf+0x180>
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 81       	ld	r24, Z
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	0e 5f       	subi	r16, 0xFE	; 254
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	88 24       	eor	r8, r8
    1dfa:	83 94       	inc	r8
    1dfc:	91 2c       	mov	r9, r1
    1dfe:	53 01       	movw	r10, r6
    1e00:	12 c0       	rjmp	.+36     	; 0x1e26 <vfprintf+0x178>
    1e02:	28 01       	movw	r4, r16
    1e04:	f2 e0       	ldi	r31, 0x02	; 2
    1e06:	4f 0e       	add	r4, r31
    1e08:	51 1c       	adc	r5, r1
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	a0 80       	ld	r10, Z
    1e0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1e10:	36 fe       	sbrs	r3, 6
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <vfprintf+0x16c>
    1e14:	69 2d       	mov	r22, r9
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <vfprintf+0x170>
    1e1a:	6f ef       	ldi	r22, 0xFF	; 255
    1e1c:	7f ef       	ldi	r23, 0xFF	; 255
    1e1e:	c5 01       	movw	r24, r10
    1e20:	4e d1       	rcall	.+668    	; 0x20be <strnlen>
    1e22:	4c 01       	movw	r8, r24
    1e24:	82 01       	movw	r16, r4
    1e26:	f3 2d       	mov	r31, r3
    1e28:	ff 77       	andi	r31, 0x7F	; 127
    1e2a:	3f 2e       	mov	r3, r31
    1e2c:	15 c0       	rjmp	.+42     	; 0x1e58 <vfprintf+0x1aa>
    1e2e:	28 01       	movw	r4, r16
    1e30:	22 e0       	ldi	r18, 0x02	; 2
    1e32:	42 0e       	add	r4, r18
    1e34:	51 1c       	adc	r5, r1
    1e36:	f8 01       	movw	r30, r16
    1e38:	a0 80       	ld	r10, Z
    1e3a:	b1 80       	ldd	r11, Z+1	; 0x01
    1e3c:	36 fe       	sbrs	r3, 6
    1e3e:	03 c0       	rjmp	.+6      	; 0x1e46 <vfprintf+0x198>
    1e40:	69 2d       	mov	r22, r9
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <vfprintf+0x19c>
    1e46:	6f ef       	ldi	r22, 0xFF	; 255
    1e48:	7f ef       	ldi	r23, 0xFF	; 255
    1e4a:	c5 01       	movw	r24, r10
    1e4c:	2d d1       	rcall	.+602    	; 0x20a8 <strnlen_P>
    1e4e:	4c 01       	movw	r8, r24
    1e50:	f3 2d       	mov	r31, r3
    1e52:	f0 68       	ori	r31, 0x80	; 128
    1e54:	3f 2e       	mov	r3, r31
    1e56:	82 01       	movw	r16, r4
    1e58:	33 fc       	sbrc	r3, 3
    1e5a:	19 c0       	rjmp	.+50     	; 0x1e8e <vfprintf+0x1e0>
    1e5c:	82 2d       	mov	r24, r2
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	88 16       	cp	r8, r24
    1e62:	99 06       	cpc	r9, r25
    1e64:	a0 f4       	brcc	.+40     	; 0x1e8e <vfprintf+0x1e0>
    1e66:	b6 01       	movw	r22, r12
    1e68:	80 e2       	ldi	r24, 0x20	; 32
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	33 d1       	rcall	.+614    	; 0x20d4 <fputc>
    1e6e:	2a 94       	dec	r2
    1e70:	f5 cf       	rjmp	.-22     	; 0x1e5c <vfprintf+0x1ae>
    1e72:	f5 01       	movw	r30, r10
    1e74:	37 fc       	sbrc	r3, 7
    1e76:	85 91       	lpm	r24, Z+
    1e78:	37 fe       	sbrs	r3, 7
    1e7a:	81 91       	ld	r24, Z+
    1e7c:	5f 01       	movw	r10, r30
    1e7e:	b6 01       	movw	r22, r12
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	28 d1       	rcall	.+592    	; 0x20d4 <fputc>
    1e84:	21 10       	cpse	r2, r1
    1e86:	2a 94       	dec	r2
    1e88:	21 e0       	ldi	r18, 0x01	; 1
    1e8a:	82 1a       	sub	r8, r18
    1e8c:	91 08       	sbc	r9, r1
    1e8e:	81 14       	cp	r8, r1
    1e90:	91 04       	cpc	r9, r1
    1e92:	79 f7       	brne	.-34     	; 0x1e72 <vfprintf+0x1c4>
    1e94:	e1 c0       	rjmp	.+450    	; 0x2058 <vfprintf+0x3aa>
    1e96:	84 36       	cpi	r24, 0x64	; 100
    1e98:	11 f0       	breq	.+4      	; 0x1e9e <vfprintf+0x1f0>
    1e9a:	89 36       	cpi	r24, 0x69	; 105
    1e9c:	39 f5       	brne	.+78     	; 0x1eec <vfprintf+0x23e>
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	37 fe       	sbrs	r3, 7
    1ea2:	07 c0       	rjmp	.+14     	; 0x1eb2 <vfprintf+0x204>
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	0c 5f       	subi	r16, 0xFC	; 252
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	08 c0       	rjmp	.+16     	; 0x1ec2 <vfprintf+0x214>
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	07 2e       	mov	r0, r23
    1eb8:	00 0c       	add	r0, r0
    1eba:	88 0b       	sbc	r24, r24
    1ebc:	99 0b       	sbc	r25, r25
    1ebe:	0e 5f       	subi	r16, 0xFE	; 254
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	f3 2d       	mov	r31, r3
    1ec4:	ff 76       	andi	r31, 0x6F	; 111
    1ec6:	3f 2e       	mov	r3, r31
    1ec8:	97 ff       	sbrs	r25, 7
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <vfprintf+0x230>
    1ecc:	90 95       	com	r25
    1ece:	80 95       	com	r24
    1ed0:	70 95       	com	r23
    1ed2:	61 95       	neg	r22
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	f0 68       	ori	r31, 0x80	; 128
    1edc:	3f 2e       	mov	r3, r31
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	a3 01       	movw	r20, r6
    1ee4:	33 d1       	rcall	.+614    	; 0x214c <__ultoa_invert>
    1ee6:	88 2e       	mov	r8, r24
    1ee8:	86 18       	sub	r8, r6
    1eea:	44 c0       	rjmp	.+136    	; 0x1f74 <vfprintf+0x2c6>
    1eec:	85 37       	cpi	r24, 0x75	; 117
    1eee:	31 f4       	brne	.+12     	; 0x1efc <vfprintf+0x24e>
    1ef0:	23 2d       	mov	r18, r3
    1ef2:	2f 7e       	andi	r18, 0xEF	; 239
    1ef4:	b2 2e       	mov	r11, r18
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	25 c0       	rjmp	.+74     	; 0x1f46 <vfprintf+0x298>
    1efc:	93 2d       	mov	r25, r3
    1efe:	99 7f       	andi	r25, 0xF9	; 249
    1f00:	b9 2e       	mov	r11, r25
    1f02:	8f 36       	cpi	r24, 0x6F	; 111
    1f04:	c1 f0       	breq	.+48     	; 0x1f36 <vfprintf+0x288>
    1f06:	18 f4       	brcc	.+6      	; 0x1f0e <vfprintf+0x260>
    1f08:	88 35       	cpi	r24, 0x58	; 88
    1f0a:	79 f0       	breq	.+30     	; 0x1f2a <vfprintf+0x27c>
    1f0c:	ae c0       	rjmp	.+348    	; 0x206a <vfprintf+0x3bc>
    1f0e:	80 37       	cpi	r24, 0x70	; 112
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <vfprintf+0x26a>
    1f12:	88 37       	cpi	r24, 0x78	; 120
    1f14:	21 f0       	breq	.+8      	; 0x1f1e <vfprintf+0x270>
    1f16:	a9 c0       	rjmp	.+338    	; 0x206a <vfprintf+0x3bc>
    1f18:	e9 2f       	mov	r30, r25
    1f1a:	e0 61       	ori	r30, 0x10	; 16
    1f1c:	be 2e       	mov	r11, r30
    1f1e:	b4 fe       	sbrs	r11, 4
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <vfprintf+0x28e>
    1f22:	fb 2d       	mov	r31, r11
    1f24:	f4 60       	ori	r31, 0x04	; 4
    1f26:	bf 2e       	mov	r11, r31
    1f28:	09 c0       	rjmp	.+18     	; 0x1f3c <vfprintf+0x28e>
    1f2a:	34 fe       	sbrs	r3, 4
    1f2c:	0a c0       	rjmp	.+20     	; 0x1f42 <vfprintf+0x294>
    1f2e:	29 2f       	mov	r18, r25
    1f30:	26 60       	ori	r18, 0x06	; 6
    1f32:	b2 2e       	mov	r11, r18
    1f34:	06 c0       	rjmp	.+12     	; 0x1f42 <vfprintf+0x294>
    1f36:	28 e0       	ldi	r18, 0x08	; 8
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	05 c0       	rjmp	.+10     	; 0x1f46 <vfprintf+0x298>
    1f3c:	20 e1       	ldi	r18, 0x10	; 16
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0x298>
    1f42:	20 e1       	ldi	r18, 0x10	; 16
    1f44:	32 e0       	ldi	r19, 0x02	; 2
    1f46:	f8 01       	movw	r30, r16
    1f48:	b7 fe       	sbrs	r11, 7
    1f4a:	07 c0       	rjmp	.+14     	; 0x1f5a <vfprintf+0x2ac>
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	0c 5f       	subi	r16, 0xFC	; 252
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <vfprintf+0x2b8>
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	0e 5f       	subi	r16, 0xFE	; 254
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	a3 01       	movw	r20, r6
    1f68:	f1 d0       	rcall	.+482    	; 0x214c <__ultoa_invert>
    1f6a:	88 2e       	mov	r8, r24
    1f6c:	86 18       	sub	r8, r6
    1f6e:	fb 2d       	mov	r31, r11
    1f70:	ff 77       	andi	r31, 0x7F	; 127
    1f72:	3f 2e       	mov	r3, r31
    1f74:	36 fe       	sbrs	r3, 6
    1f76:	0d c0       	rjmp	.+26     	; 0x1f92 <vfprintf+0x2e4>
    1f78:	23 2d       	mov	r18, r3
    1f7a:	2e 7f       	andi	r18, 0xFE	; 254
    1f7c:	a2 2e       	mov	r10, r18
    1f7e:	89 14       	cp	r8, r9
    1f80:	58 f4       	brcc	.+22     	; 0x1f98 <vfprintf+0x2ea>
    1f82:	34 fe       	sbrs	r3, 4
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <vfprintf+0x2ee>
    1f86:	32 fc       	sbrc	r3, 2
    1f88:	09 c0       	rjmp	.+18     	; 0x1f9c <vfprintf+0x2ee>
    1f8a:	83 2d       	mov	r24, r3
    1f8c:	8e 7e       	andi	r24, 0xEE	; 238
    1f8e:	a8 2e       	mov	r10, r24
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <vfprintf+0x2ee>
    1f92:	b8 2c       	mov	r11, r8
    1f94:	a3 2c       	mov	r10, r3
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <vfprintf+0x2f0>
    1f98:	b8 2c       	mov	r11, r8
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <vfprintf+0x2f0>
    1f9c:	b9 2c       	mov	r11, r9
    1f9e:	a4 fe       	sbrs	r10, 4
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <vfprintf+0x312>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e8 0d       	add	r30, r8
    1fa6:	f1 1d       	adc	r31, r1
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 33       	cpi	r24, 0x30	; 48
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <vfprintf+0x308>
    1fae:	9a 2d       	mov	r25, r10
    1fb0:	99 7e       	andi	r25, 0xE9	; 233
    1fb2:	a9 2e       	mov	r10, r25
    1fb4:	09 c0       	rjmp	.+18     	; 0x1fc8 <vfprintf+0x31a>
    1fb6:	a2 fe       	sbrs	r10, 2
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <vfprintf+0x318>
    1fba:	b3 94       	inc	r11
    1fbc:	b3 94       	inc	r11
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <vfprintf+0x31a>
    1fc0:	8a 2d       	mov	r24, r10
    1fc2:	86 78       	andi	r24, 0x86	; 134
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <vfprintf+0x31a>
    1fc6:	b3 94       	inc	r11
    1fc8:	a3 fc       	sbrc	r10, 3
    1fca:	10 c0       	rjmp	.+32     	; 0x1fec <vfprintf+0x33e>
    1fcc:	a0 fe       	sbrs	r10, 0
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <vfprintf+0x32e>
    1fd0:	b2 14       	cp	r11, r2
    1fd2:	80 f4       	brcc	.+32     	; 0x1ff4 <vfprintf+0x346>
    1fd4:	28 0c       	add	r2, r8
    1fd6:	92 2c       	mov	r9, r2
    1fd8:	9b 18       	sub	r9, r11
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <vfprintf+0x348>
    1fdc:	b2 14       	cp	r11, r2
    1fde:	58 f4       	brcc	.+22     	; 0x1ff6 <vfprintf+0x348>
    1fe0:	b6 01       	movw	r22, r12
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	76 d0       	rcall	.+236    	; 0x20d4 <fputc>
    1fe8:	b3 94       	inc	r11
    1fea:	f8 cf       	rjmp	.-16     	; 0x1fdc <vfprintf+0x32e>
    1fec:	b2 14       	cp	r11, r2
    1fee:	18 f4       	brcc	.+6      	; 0x1ff6 <vfprintf+0x348>
    1ff0:	2b 18       	sub	r2, r11
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <vfprintf+0x34a>
    1ff4:	98 2c       	mov	r9, r8
    1ff6:	21 2c       	mov	r2, r1
    1ff8:	a4 fe       	sbrs	r10, 4
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <vfprintf+0x36c>
    1ffc:	b6 01       	movw	r22, r12
    1ffe:	80 e3       	ldi	r24, 0x30	; 48
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	68 d0       	rcall	.+208    	; 0x20d4 <fputc>
    2004:	a2 fe       	sbrs	r10, 2
    2006:	16 c0       	rjmp	.+44     	; 0x2034 <vfprintf+0x386>
    2008:	a1 fc       	sbrc	r10, 1
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <vfprintf+0x364>
    200c:	88 e7       	ldi	r24, 0x78	; 120
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <vfprintf+0x368>
    2012:	88 e5       	ldi	r24, 0x58	; 88
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	b6 01       	movw	r22, r12
    2018:	0c c0       	rjmp	.+24     	; 0x2032 <vfprintf+0x384>
    201a:	8a 2d       	mov	r24, r10
    201c:	86 78       	andi	r24, 0x86	; 134
    201e:	51 f0       	breq	.+20     	; 0x2034 <vfprintf+0x386>
    2020:	a1 fe       	sbrs	r10, 1
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <vfprintf+0x37a>
    2024:	8b e2       	ldi	r24, 0x2B	; 43
    2026:	01 c0       	rjmp	.+2      	; 0x202a <vfprintf+0x37c>
    2028:	80 e2       	ldi	r24, 0x20	; 32
    202a:	a7 fc       	sbrc	r10, 7
    202c:	8d e2       	ldi	r24, 0x2D	; 45
    202e:	b6 01       	movw	r22, r12
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	50 d0       	rcall	.+160    	; 0x20d4 <fputc>
    2034:	89 14       	cp	r8, r9
    2036:	30 f4       	brcc	.+12     	; 0x2044 <vfprintf+0x396>
    2038:	b6 01       	movw	r22, r12
    203a:	80 e3       	ldi	r24, 0x30	; 48
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	4a d0       	rcall	.+148    	; 0x20d4 <fputc>
    2040:	9a 94       	dec	r9
    2042:	f8 cf       	rjmp	.-16     	; 0x2034 <vfprintf+0x386>
    2044:	8a 94       	dec	r8
    2046:	f3 01       	movw	r30, r6
    2048:	e8 0d       	add	r30, r8
    204a:	f1 1d       	adc	r31, r1
    204c:	80 81       	ld	r24, Z
    204e:	b6 01       	movw	r22, r12
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	40 d0       	rcall	.+128    	; 0x20d4 <fputc>
    2054:	81 10       	cpse	r8, r1
    2056:	f6 cf       	rjmp	.-20     	; 0x2044 <vfprintf+0x396>
    2058:	22 20       	and	r2, r2
    205a:	09 f4       	brne	.+2      	; 0x205e <vfprintf+0x3b0>
    205c:	4e ce       	rjmp	.-868    	; 0x1cfa <vfprintf+0x4c>
    205e:	b6 01       	movw	r22, r12
    2060:	80 e2       	ldi	r24, 0x20	; 32
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	37 d0       	rcall	.+110    	; 0x20d4 <fputc>
    2066:	2a 94       	dec	r2
    2068:	f7 cf       	rjmp	.-18     	; 0x2058 <vfprintf+0x3aa>
    206a:	f6 01       	movw	r30, r12
    206c:	86 81       	ldd	r24, Z+6	; 0x06
    206e:	97 81       	ldd	r25, Z+7	; 0x07
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <vfprintf+0x3c8>
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	9f ef       	ldi	r25, 0xFF	; 255
    2076:	2b 96       	adiw	r28, 0x0b	; 11
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	9f 90       	pop	r9
    2098:	8f 90       	pop	r8
    209a:	7f 90       	pop	r7
    209c:	6f 90       	pop	r6
    209e:	5f 90       	pop	r5
    20a0:	4f 90       	pop	r4
    20a2:	3f 90       	pop	r3
    20a4:	2f 90       	pop	r2
    20a6:	08 95       	ret

000020a8 <strnlen_P>:
    20a8:	fc 01       	movw	r30, r24
    20aa:	05 90       	lpm	r0, Z+
    20ac:	61 50       	subi	r22, 0x01	; 1
    20ae:	70 40       	sbci	r23, 0x00	; 0
    20b0:	01 10       	cpse	r0, r1
    20b2:	d8 f7       	brcc	.-10     	; 0x20aa <strnlen_P+0x2>
    20b4:	80 95       	com	r24
    20b6:	90 95       	com	r25
    20b8:	8e 0f       	add	r24, r30
    20ba:	9f 1f       	adc	r25, r31
    20bc:	08 95       	ret

000020be <strnlen>:
    20be:	fc 01       	movw	r30, r24
    20c0:	61 50       	subi	r22, 0x01	; 1
    20c2:	70 40       	sbci	r23, 0x00	; 0
    20c4:	01 90       	ld	r0, Z+
    20c6:	01 10       	cpse	r0, r1
    20c8:	d8 f7       	brcc	.-10     	; 0x20c0 <strnlen+0x2>
    20ca:	80 95       	com	r24
    20cc:	90 95       	com	r25
    20ce:	8e 0f       	add	r24, r30
    20d0:	9f 1f       	adc	r25, r31
    20d2:	08 95       	ret

000020d4 <fputc>:
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	fb 01       	movw	r30, r22
    20de:	23 81       	ldd	r18, Z+3	; 0x03
    20e0:	21 fd       	sbrc	r18, 1
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <fputc+0x16>
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	9f ef       	ldi	r25, 0xFF	; 255
    20e8:	2c c0       	rjmp	.+88     	; 0x2142 <fputc+0x6e>
    20ea:	22 ff       	sbrs	r18, 2
    20ec:	16 c0       	rjmp	.+44     	; 0x211a <fputc+0x46>
    20ee:	46 81       	ldd	r20, Z+6	; 0x06
    20f0:	57 81       	ldd	r21, Z+7	; 0x07
    20f2:	24 81       	ldd	r18, Z+4	; 0x04
    20f4:	35 81       	ldd	r19, Z+5	; 0x05
    20f6:	42 17       	cp	r20, r18
    20f8:	53 07       	cpc	r21, r19
    20fa:	44 f4       	brge	.+16     	; 0x210c <fputc+0x38>
    20fc:	a0 81       	ld	r26, Z
    20fe:	b1 81       	ldd	r27, Z+1	; 0x01
    2100:	9d 01       	movw	r18, r26
    2102:	2f 5f       	subi	r18, 0xFF	; 255
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
    2106:	31 83       	std	Z+1, r19	; 0x01
    2108:	20 83       	st	Z, r18
    210a:	8c 93       	st	X, r24
    210c:	26 81       	ldd	r18, Z+6	; 0x06
    210e:	37 81       	ldd	r19, Z+7	; 0x07
    2110:	2f 5f       	subi	r18, 0xFF	; 255
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	37 83       	std	Z+7, r19	; 0x07
    2116:	26 83       	std	Z+6, r18	; 0x06
    2118:	14 c0       	rjmp	.+40     	; 0x2142 <fputc+0x6e>
    211a:	8b 01       	movw	r16, r22
    211c:	ec 01       	movw	r28, r24
    211e:	fb 01       	movw	r30, r22
    2120:	00 84       	ldd	r0, Z+8	; 0x08
    2122:	f1 85       	ldd	r31, Z+9	; 0x09
    2124:	e0 2d       	mov	r30, r0
    2126:	19 95       	eicall
    2128:	89 2b       	or	r24, r25
    212a:	e1 f6       	brne	.-72     	; 0x20e4 <fputc+0x10>
    212c:	d8 01       	movw	r26, r16
    212e:	16 96       	adiw	r26, 0x06	; 6
    2130:	8d 91       	ld	r24, X+
    2132:	9c 91       	ld	r25, X
    2134:	17 97       	sbiw	r26, 0x07	; 7
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	17 96       	adiw	r26, 0x07	; 7
    213a:	9c 93       	st	X, r25
    213c:	8e 93       	st	-X, r24
    213e:	16 97       	sbiw	r26, 0x06	; 6
    2140:	ce 01       	movw	r24, r28
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <__ultoa_invert>:
    214c:	fa 01       	movw	r30, r20
    214e:	aa 27       	eor	r26, r26
    2150:	28 30       	cpi	r18, 0x08	; 8
    2152:	51 f1       	breq	.+84     	; 0x21a8 <__ultoa_invert+0x5c>
    2154:	20 31       	cpi	r18, 0x10	; 16
    2156:	81 f1       	breq	.+96     	; 0x21b8 <__ultoa_invert+0x6c>
    2158:	e8 94       	clt
    215a:	6f 93       	push	r22
    215c:	6e 7f       	andi	r22, 0xFE	; 254
    215e:	6e 5f       	subi	r22, 0xFE	; 254
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	8f 4f       	sbci	r24, 0xFF	; 255
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	af 4f       	sbci	r26, 0xFF	; 255
    2168:	b1 e0       	ldi	r27, 0x01	; 1
    216a:	3e d0       	rcall	.+124    	; 0x21e8 <__ultoa_invert+0x9c>
    216c:	b4 e0       	ldi	r27, 0x04	; 4
    216e:	3c d0       	rcall	.+120    	; 0x21e8 <__ultoa_invert+0x9c>
    2170:	67 0f       	add	r22, r23
    2172:	78 1f       	adc	r23, r24
    2174:	89 1f       	adc	r24, r25
    2176:	9a 1f       	adc	r25, r26
    2178:	a1 1d       	adc	r26, r1
    217a:	68 0f       	add	r22, r24
    217c:	79 1f       	adc	r23, r25
    217e:	8a 1f       	adc	r24, r26
    2180:	91 1d       	adc	r25, r1
    2182:	a1 1d       	adc	r26, r1
    2184:	6a 0f       	add	r22, r26
    2186:	71 1d       	adc	r23, r1
    2188:	81 1d       	adc	r24, r1
    218a:	91 1d       	adc	r25, r1
    218c:	a1 1d       	adc	r26, r1
    218e:	20 d0       	rcall	.+64     	; 0x21d0 <__ultoa_invert+0x84>
    2190:	09 f4       	brne	.+2      	; 0x2194 <__ultoa_invert+0x48>
    2192:	68 94       	set
    2194:	3f 91       	pop	r19
    2196:	2a e0       	ldi	r18, 0x0A	; 10
    2198:	26 9f       	mul	r18, r22
    219a:	11 24       	eor	r1, r1
    219c:	30 19       	sub	r19, r0
    219e:	30 5d       	subi	r19, 0xD0	; 208
    21a0:	31 93       	st	Z+, r19
    21a2:	de f6       	brtc	.-74     	; 0x215a <__ultoa_invert+0xe>
    21a4:	cf 01       	movw	r24, r30
    21a6:	08 95       	ret
    21a8:	46 2f       	mov	r20, r22
    21aa:	47 70       	andi	r20, 0x07	; 7
    21ac:	40 5d       	subi	r20, 0xD0	; 208
    21ae:	41 93       	st	Z+, r20
    21b0:	b3 e0       	ldi	r27, 0x03	; 3
    21b2:	0f d0       	rcall	.+30     	; 0x21d2 <__ultoa_invert+0x86>
    21b4:	c9 f7       	brne	.-14     	; 0x21a8 <__ultoa_invert+0x5c>
    21b6:	f6 cf       	rjmp	.-20     	; 0x21a4 <__ultoa_invert+0x58>
    21b8:	46 2f       	mov	r20, r22
    21ba:	4f 70       	andi	r20, 0x0F	; 15
    21bc:	40 5d       	subi	r20, 0xD0	; 208
    21be:	4a 33       	cpi	r20, 0x3A	; 58
    21c0:	18 f0       	brcs	.+6      	; 0x21c8 <__ultoa_invert+0x7c>
    21c2:	49 5d       	subi	r20, 0xD9	; 217
    21c4:	31 fd       	sbrc	r19, 1
    21c6:	40 52       	subi	r20, 0x20	; 32
    21c8:	41 93       	st	Z+, r20
    21ca:	02 d0       	rcall	.+4      	; 0x21d0 <__ultoa_invert+0x84>
    21cc:	a9 f7       	brne	.-22     	; 0x21b8 <__ultoa_invert+0x6c>
    21ce:	ea cf       	rjmp	.-44     	; 0x21a4 <__ultoa_invert+0x58>
    21d0:	b4 e0       	ldi	r27, 0x04	; 4
    21d2:	a6 95       	lsr	r26
    21d4:	97 95       	ror	r25
    21d6:	87 95       	ror	r24
    21d8:	77 95       	ror	r23
    21da:	67 95       	ror	r22
    21dc:	ba 95       	dec	r27
    21de:	c9 f7       	brne	.-14     	; 0x21d2 <__ultoa_invert+0x86>
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	61 05       	cpc	r22, r1
    21e4:	71 05       	cpc	r23, r1
    21e6:	08 95       	ret
    21e8:	9b 01       	movw	r18, r22
    21ea:	ac 01       	movw	r20, r24
    21ec:	0a 2e       	mov	r0, r26
    21ee:	06 94       	lsr	r0
    21f0:	57 95       	ror	r21
    21f2:	47 95       	ror	r20
    21f4:	37 95       	ror	r19
    21f6:	27 95       	ror	r18
    21f8:	ba 95       	dec	r27
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <__ultoa_invert+0xa2>
    21fc:	62 0f       	add	r22, r18
    21fe:	73 1f       	adc	r23, r19
    2200:	84 1f       	adc	r24, r20
    2202:	95 1f       	adc	r25, r21
    2204:	a0 1d       	adc	r26, r0
    2206:	08 95       	ret

00002208 <_exit>:
    2208:	f8 94       	cli

0000220a <__stop_program>:
    220a:	ff cf       	rjmp	.-2      	; 0x220a <__stop_program>
